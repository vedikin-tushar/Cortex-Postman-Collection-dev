{
	"info": {
		"_postman_id": "92a8e7aa-88ed-4a3c-b975-7e424e8b4a0d",
		"name": "Automation admin test dev",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29644334"
	},
	"item": [
		{
			"name": "ADMIN-API-Auto",
			"item": [
				{
					"name": "User",
					"item": [
						{
							"name": "login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"accessToken\", jsonData.accessToken);\r",
											"});\r",
											"\r",
											"pm.test(\"message, success and accessToken\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Verify success\r",
											"    pm.expect(jsonData.success).to.eql(true);\r",
											"\r",
											"    // Verify message\r",
											"    pm.expect(jsonData.message).to.eql(\"Login successful\");\r",
											"\r",
											"    // Verify accessToken\r",
											"    pm.expect(jsonData.accessToken).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"// Define the expected fields\r",
											"const expectedFields = [\"accessToken\", \"data\", \"errors\", \"message\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "// {\r\n//     \"email\":\"sagarpatel41097@gmail.com\",\r\n//     \"password\":\"asd@12345\"\r\n// }\r\n\r\n{\r\n    \"email\":\"kishan.khodbhaya@vedikin.com\",\r\n    \"password\":\"admin123\"\r\n}\r\n\r\n// {\r\n//     \"email\":\"tushar.bagul@vedikin.com\",\r\n//     \"password\":\"asd@1234\"\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}login",
									"host": [
										"{{base_url}}login"
									]
								}
							},
							"response": []
						},
						{
							"name": "user_list_after_login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 'userId' matches variable 'Admin_id'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedUserId = pm.variables.get(\"Admin_id\"); // Retrieve the value of the variable\r",
											"    pm.expect(jsonData.data[0].userId).to.eql(parseInt(expectedUserId)); // Ensure the comparison is accurate\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'email' matches variable 'Admin_email'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedEmail = pm.variables.get(\"Admin_email\"); // Retrieve the value of the variable\r",
											"    pm.expect(jsonData.data[0].email).to.eql(expectedEmail);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify 'message' is 'User data fetched'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"User data fetched\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'statusCode' is 200\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"data\", \"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that the 'data' field is an array and contains the expected fields within the first object\r",
											"pm.test(\"Verify that 'data' contains the expected fields\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"    \r",
											"    const user = actualResponse.data[0];\r",
											"    const userExpectedFields = [\"email\", \"firstName\", \"lastName\", \"image\", \"phone\", \"role\", \"roleId\", \"status\", \"userId\" ];\r",
											"    \r",
											"    userExpectedFields.forEach(field => {\r",
											"        pm.expect(user).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Extract the response JSON\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"// Check if the email is not null\r",
											"pm.test(\"Email is not null\", function () {\r",
											"    let email = jsonData.data[0].email;\r",
											"    pm.expect(email).to.not.be.null;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// {\r\n//     \"roleId\":1\r\n// }\r\n\r\n{\r\n \"userId\":{{Admin_id}} // Set manually if environment changed\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}user-data",
									"host": [
										"{{base_url}}user-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "user_list_after_login_role_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 'message' is 'User data fetched'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"User data fetched\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'statusCode' is 200\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"// Get the roleId from the environment\r",
											"let roleId = parseInt(pm.environment.get(\"roleId\"), 10);\r",
											"\r",
											"// Parse the response\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Check if roleId is 1 or 2\r",
											"if (roleId === 1 || roleId === 2) {\r",
											"    // Validate that the response is successful\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Success is true\", function () {\r",
											"        pm.expect(response.success).to.be.true;\r",
											"    });\r",
											"\r",
											"    // Check if the first element in the data array has the correct roleId\r",
											"    pm.test(\"First data item has correct roleId\", function () {\r",
											"        pm.expect(response.data[0].roleId).to.eql(roleId);\r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"data\", \"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that the 'data' field is an array and contains the expected fields within the first object\r",
											"pm.test(\"Verify that 'data' contains the expected fields\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"    \r",
											"    const user = actualResponse.data[0];\r",
											"    const userExpectedFields = [\"email\", \"firstName\", \"lastName\", \"image\", \"phone\", \"role\", \"roleId\", \"status\", \"userId\" ];\r",
											"    \r",
											"    userExpectedFields.forEach(field => {\r",
											"        pm.expect(user).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Extract the response JSON\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"// Check if the email is not null\r",
											"pm.test(\"Email is not null\", function () {\r",
											"    let email = jsonData.data[0].email;\r",
											"    pm.expect(email).to.not.be.null;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Get the current roleId from the environment, or initialize it to 1\r",
											"let roleId = pm.environment.get(\"roleId\") || 1;\r",
											"\r",
											"// Increment the roleId, cycling through 1, 2, and 3\r",
											"roleId = (roleId % 2) + 1;\r",
											"\r",
											"// Set the updated roleId back to the environment\r",
											"pm.environment.set(\"roleId\", roleId);\r",
											"\r",
											"// Set the roleId in the request body\r",
											"let requestData = {\r",
											"    \"roleId\": roleId\r",
											"};\r",
											"\r",
											"// Update the request body with the new roleId\r",
											"pm.request.body.raw = JSON.stringify(requestData);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"roleId\":{{roleId}}\r\n}\r\n\r\n// {\r\n//  \"userId\":{{Admin_id}} // Set manually if environment changed\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}user-data",
									"host": [
										"{{base_url}}user-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "user_list_after_login_role_id_3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the response\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Validate that the response has the correct status code\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"// Validate that the response contains the expected error message\r",
											"pm.test(\"Error message 'Role ID not found' is present\", function () {\r",
											"    pm.expect(response.errors).to.include(\"Role ID not found\");\r",
											"});\r",
											"\r",
											"// Validate that success is false\r",
											"pm.test(\"Success is false\", function () {\r",
											"    pm.expect(response.success).to.be.false;\r",
											"});\r",
											"\r",
											"// Validate that message is null\r",
											"pm.test(\"Message is null\", function () {\r",
											"    pm.expect(response.message).to.be.null;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"roleId\":3\r\n}\r\n\r\n// {\r\n//  \"userId\":{{Admin_id}} // Set manually if environment changed\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}user-data",
									"host": [
										"{{base_url}}user-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "user_list_after_login_status_with_roleId_1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Get the current status from the environment\r",
											"let status = pm.environment.get(\"status\");\r",
											"\r",
											"// Define the expected response structure when users are found\r",
											"function validateUserData(response) {\r",
											"    pm.test(\"Response should have success set to true\", () => {\r",
											"        pm.expect(response.success).to.be.true;\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should have statusCode 200\", () => {\r",
											"        pm.expect(response.statusCode).to.eql(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should contain data array\", () => {\r",
											"        pm.expect(response.data).to.be.an('array');\r",
											"        response.data.forEach(user => {\r",
											"            pm.expect(user).to.have.all.keys(\r",
											"                \"createdBy\", \"email\", \"firstName\",\r",
											"                \"image\", \"lastName\", \r",
											"                \"phone\", \"role\", \"roleId\",\r",
											"                \"status\", \"updatedBy\", \"userId\",\r",
											"            );\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// Define the expected response structure when no users are found\r",
											"function validateNoUsersFound(response) {\r",
											"    pm.test(\"Response should have success set to false\", () => {\r",
											"        pm.expect(response.success).to.be.false;\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should have statusCode 404\", () => {\r",
											"        pm.expect(response.statusCode).to.eql(404);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should contain errors array\", () => {\r",
											"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;\r",
											"        pm.expect(response.errors[0]).to.eql(\"No users found with the given role ID and status\");\r",
											"    });\r",
											"}\r",
											"\r",
											"// Parse the response\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Check if the status is Pending, Active, or InActive\r",
											"if ([\"Pending\", \"Active\", \"InActive\"].includes(status)) {\r",
											"    pm.test(`Status is '${status}', validate response accordingly`, () => {\r",
											"        if (pm.response.code === 200) {\r",
											"            validateUserData(response);\r",
											"        } else if (pm.response.code === 404) {\r",
											"            validateNoUsersFound(response);\r",
											"        } else {\r",
											"            pm.test(\"Unexpected response code\", () => {\r",
											"                pm.expect.fail(`Received unexpected status code: ${pm.response.code}`);\r",
											"            });\r",
											"        }\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Unexpected status value\", () => {\r",
											"        pm.expect.fail(`Received unexpected status value: ${status}`);\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// 1. Handling roleId: Get the current roleId from the environment, or initialize it to 1\r",
											"let roleId = pm.environment.get(\"roleId\") || 1;\r",
											"\r",
											"// Increment the roleId, cycling through 1, 2, and 3\r",
											"roleId = (roleId % 1) + 1;\r",
											"\r",
											"// Set the updated roleId back to the environment\r",
											"pm.environment.set(\"roleId\", roleId);\r",
											"\r",
											"// 2. Handling status: Get the current status from the environment, or initialize it to \"Pending\"\r",
											"let status = pm.environment.get(\"status\") || \"Pending\";\r",
											"\r",
											"// Define the sequence of statuses\r",
											"const statuses = [\"Pending\", \"Active\", \"InActive\"];\r",
											"\r",
											"// Find the current index of the status in the sequence\r",
											"let currentIndex = statuses.indexOf(status);\r",
											"\r",
											"// Set the next status in the sequence, cycling back to the start if needed\r",
											"status = statuses[(currentIndex + 1) % statuses.length];\r",
											"\r",
											"// Set the updated status back to the environment\r",
											"pm.environment.set(\"status\", status);\r",
											"\r",
											"// Log the current values for debugging purposes\r",
											"console.log(\"Current roleId value:\", roleId);\r",
											"console.log(\"Current status value:\", status);\r",
											"\r",
											"// Create the request data object including both roleId and status\r",
											"let requestData = {\r",
											"    \"roleId\": roleId,\r",
											"    \"status\": status\r",
											"};\r",
											"\r",
											"// Update the request body with the new roleId and status values\r",
											"pm.request.body.raw = JSON.stringify(requestData);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\r\n\r\n// {\r\n//  \"userId\":{{Admin_id}} // Set manually if environment changed\r\n// }\r\n\r\n{\r\n    \"status\": {{status}},//Active or InActive\r\n    \"roleId\": 1      \r\n}\r\n\r\n// {\r\n//     \"status\": \"InActive\",\r\n//     \"roleId\": 1\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}user-data",
									"host": [
										"{{base_url}}user-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "user_list_after_login_status_with_roleId_2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Get the current status from the environment\r",
											"let status = pm.environment.get(\"status\");\r",
											"\r",
											"// Define the expected response structure when users are found\r",
											"function validateUserData(response) {\r",
											"    pm.test(\"Response should have success set to true\", () => {\r",
											"        pm.expect(response.success).to.be.true;\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should have statusCode 200\", () => {\r",
											"        pm.expect(response.statusCode).to.eql(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should contain data array\", () => {\r",
											"        pm.expect(response.data).to.be.an('array');\r",
											"        response.data.forEach(user => {\r",
											"            pm.expect(user).to.have.all.keys(\r",
											"                \"country\", \"createdBy\", \"email\", \"firstName\", \"highestqualification\",\r",
											"                \"image\", \"industrytype\", \"lastName\", \"midName\", \"organization\",\r",
											"                \"phone\", \"pincode\", \"postaladdress\", \"prefix\", \"role\", \"roleId\",\r",
											"                \"state\", \"status\", \"street\", \"surveyorRank\", \"updatedBy\", \"userId\",\r",
											"                \"yearofpassing\"\r",
											"            );\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// Define the expected response structure when no users are found\r",
											"function validateNoUsersFound(response) {\r",
											"    pm.test(\"Response should have success set to false\", () => {\r",
											"        pm.expect(response.success).to.be.false;\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should have statusCode 404\", () => {\r",
											"        pm.expect(response.statusCode).to.eql(404);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should contain errors array\", () => {\r",
											"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;\r",
											"        pm.expect(response.errors[0]).to.eql(\"No users found with the given role ID and status\");\r",
											"    });\r",
											"}\r",
											"\r",
											"// Parse the response\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Check if the status is Pending, Active, or InActive\r",
											"if ([\"Pending\", \"Active\", \"InActive\"].includes(status)) {\r",
											"    pm.test(`Status is '${status}', validate response accordingly`, () => {\r",
											"        if (pm.response.code === 200) {\r",
											"            validateUserData(response);\r",
											"        } else if (pm.response.code === 404) {\r",
											"            validateNoUsersFound(response);\r",
											"        } else {\r",
											"            pm.test(\"Unexpected response code\", () => {\r",
											"                pm.expect.fail(`Received unexpected status code: ${pm.response.code}`);\r",
											"            });\r",
											"        }\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Unexpected status value\", () => {\r",
											"        pm.expect.fail(`Received unexpected status value: ${status}`);\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// 1. Handling roleId: Set roleId to a static value of 2\r",
											"let roleId = 2;\r",
											"\r",
											"// Set the roleId to the environment (though it's static in this case, it's good practice to update it)\r",
											"pm.environment.set(\"roleId\", roleId);\r",
											"\r",
											"// 2. Handling status: Get the current status from the environment, or initialize it to \"Pending\"\r",
											"let status = pm.environment.get(\"status\") || \"Pending\";\r",
											"\r",
											"// Define the sequence of statuses\r",
											"const statuses = [\"Pending\", \"Active\", \"InActive\"];\r",
											"\r",
											"// Find the current index of the status in the sequence\r",
											"let currentIndex = statuses.indexOf(status);\r",
											"\r",
											"// Set the next status in the sequence, cycling back to the start if needed\r",
											"status = statuses[(currentIndex + 1) % statuses.length];\r",
											"\r",
											"// Set the updated status back to the environment\r",
											"pm.environment.set(\"status\", status);\r",
											"\r",
											"// Log the current values for debugging purposes\r",
											"console.log(\"Current roleId value:\", roleId);\r",
											"console.log(\"Current status value:\", status);\r",
											"\r",
											"// Create the request data object including both roleId and status\r",
											"let requestData = {\r",
											"    \"roleId\": roleId,\r",
											"    \"status\": status\r",
											"};\r",
											"\r",
											"// Update the request body with the new roleId and status values\r",
											"pm.request.body.raw = JSON.stringify(requestData);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// {\r\n//  \"userId\":{{Admin_id}} // Set manually if environment changed\r\n// }\r\n\r\n{\r\n    \"status\": {{status}},//Active or InActive\r\n    \"roleId\": 2     \r\n}\r\n\r\n// {\r\n//     \"status\": \"InActive\",\r\n//     \"roleId\": 1\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}user-data",
									"host": [
										"{{base_url}}user-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "user_list_after_login_full",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 'message' is 'User data fetched'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"User data fetched\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'statusCode' is 200\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"data\", \"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that the 'data' field is an array and contains the expected fields within the first object\r",
											"pm.test(\"Verify that 'data' contains the expected fields\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"    \r",
											"    const user = actualResponse.data[0];\r",
											"    const userExpectedFields = [\"email\", \"firstName\", \"lastName\", \"image\", \"phone\", \"role\", \"roleId\", \"status\", \"userId\" ];\r",
											"    \r",
											"    userExpectedFields.forEach(field => {\r",
											"        pm.expect(user).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Extract the response JSON\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"// Check if the email is not null\r",
											"pm.test(\"Email is not null\", function () {\r",
											"    let email = jsonData.data[0].email;\r",
											"    pm.expect(email).to.not.be.null;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n}\r\n\r\n// {\r\n//     \"roleId\":1\r\n// }\r\n\r\n// {\r\n//  \"userId\":{{Admin_id}}\r\n// }\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}user-data",
									"host": [
										"{{base_url}}user-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "user-add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random string of given length\r",
											"function generateRandomString(length) {\r",
											"    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"\r",
											"// Generate random values\r",
											"let randomFirstName = generateRandomString(6);\r",
											"let randomLastName = generateRandomString(6);\r",
											"\r",
											"// Combine the random first and last names with a domain to create a random email\r",
											"let randomEmail = randomFirstName.toLowerCase() + '.' + randomLastName.toLowerCase() + '@test.com';\r",
											"\r",
											"// Set variables with generated values\r",
											"pm.variables.set(\"firstName\", randomFirstName);\r",
											"pm.variables.set(\"lastName\", randomLastName);\r",
											"pm.variables.set(\"email\", randomEmail);\r",
											"\r",
											"// Log the generated email (optional)\r",
											"console.log(\"Generated Email: \" + randomEmail);\r",
											"\r",
											"// Set variables with generated values\r",
											"\r",
											"pm.variables.set(\"firstName\", randomFirstName);\r",
											"pm.variables.set(\"lastName\", randomLastName);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"newAdmin_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"newAdmin_id\", jsonData.userId);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'message' is 'User added successfully'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"User added successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'success' is 'true'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.eql(\"true\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'userId' is an integer\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.userId).to.be.a('number');\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});\r",
											"\r",
											"// Retrieve the values used in the request\r",
											"let firstName = pm.variables.get(\"firstName\");\r",
											"let lastName = pm.variables.get(\"lastName\");\r",
											"\r",
											"\r",
											"// Set the values in the environment or collection\r",
											"pm.environment.set(\"firstName1\", firstName);\r",
											"pm.environment.set(\"lastName1\", lastName);\r",
											"\r",
											"\r",
											"// Optionally, log the values to ensure they were set correctly\r",
											"console.log(\"First Name:\", firstName);\r",
											"console.log(\"Last Name:\", lastName);\r",
											"\r",
											"\r",
											"// Define the expected fields\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"userId\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"{{firstName}}\",\r\n    \"lastName\": \"{{lastName}}\",\r\n    \"email\":\"{{email}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}user-add",
									"host": [
										"{{base_url}}user-add"
									]
								}
							},
							"response": []
						},
						{
							"name": "user_list_after_add",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 'userId' matches variable 'newAdmin_id'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedUserId = pm.variables.get(\"newAdmin_id\"); // Retrieve the value of the variable\r",
											"    pm.expect(jsonData.data[0].userId).to.eql(parseInt(expectedUserId)); // Ensure the comparison is accurate\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify 'message' is 'User data fetched'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"User data fetched\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"let responseBody = pm.response.json();\r",
											"\r",
											"// Extract data from the response\r",
											"let responseFirstName = responseBody.data[0].firstName;\r",
											"let responseLastName = responseBody.data[0].lastName;\r",
											"\r",
											"\r",
											"// Retrieve the stored variables\r",
											"let storedFirstName = pm.variables.get(\"firstName1\"); // Get from local variable scope\r",
											"let storedLastName = pm.variables.get(\"lastName1\");   // Get from local variable scope\r",
											"\r",
											"\r",
											"// Verify firstName\r",
											"pm.test(\"First Name is correct\", function () {\r",
											"    pm.expect(responseFirstName).to.eql(storedFirstName);\r",
											"});\r",
											"\r",
											"// Verify lastName\r",
											"pm.test(\"Last Name is correct\", function () {\r",
											"    pm.expect(responseLastName).to.eql(storedLastName);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"data\", \"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that the 'data' field is an array and contains the expected fields within the first object\r",
											"pm.test(\"Verify that 'data' contains the expected fields\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"    \r",
											"    const user = actualResponse.data[0];\r",
											"    const userExpectedFields = [\"email\", \"firstName\", \"lastName\", \"image\", \"phone\", \"role\", \"roleId\", \"status\", \"userId\" ];\r",
											"    \r",
											"    userExpectedFields.forEach(field => {\r",
											"        pm.expect(user).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Extract the response JSON\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"// Check if the email is not null\r",
											"pm.test(\"Email is not null\", function () {\r",
											"    let email = jsonData.data[0].email;\r",
											"    pm.expect(email).to.not.be.null;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// {\r\n//     \"roleId\":1\r\n// }\r\n\r\n{\r\n \"userId\":{{newAdmin_id}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}user-data",
									"host": [
										"{{base_url}}user-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "user_list_after_add_full",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 'message' is 'User data fetched'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"User data fetched\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"data\", \"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that the 'data' field is an array and contains the expected fields within the first object\r",
											"pm.test(\"Verify that 'data' contains the expected fields\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"    \r",
											"    const user = actualResponse.data[0];\r",
											"    const userExpectedFields = [\"email\", \"firstName\", \"lastName\", \"image\", \"phone\", \"role\", \"roleId\", \"status\", \"userId\" ];\r",
											"    \r",
											"    userExpectedFields.forEach(field => {\r",
											"        pm.expect(user).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Extract the response JSON\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"// Check if the email is not null\r",
											"pm.test(\"Email is not null\", function () {\r",
											"    let email = jsonData.data[0].email;\r",
											"    pm.expect(email).to.not.be.null;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// {\r\n//     \"roleId\":1\r\n// }\r\n\r\n// {\r\n//  \"userId\":{{newAdmin_id}}\r\n// }\r\n\r\n{\r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}user-data",
									"host": [
										"{{base_url}}user-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "user-update",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random 10-digit phone number\r",
											"function generateRandomPhoneNumber() {\r",
											"    let phone = Math.floor(Math.random() * 9000000000) + 1000000000;\r",
											"    return phone;\r",
											"}\r",
											"\r",
											"// Function to generate a random string of given length\r",
											"function generateRandomString(length) {\r",
											"    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"\r",
											"// Generate random values\r",
											"let randomFirstName = generateRandomString(6);\r",
											"let randomLastName = generateRandomString(6);\r",
											"let randomPhone = generateRandomPhoneNumber();\r",
											"\r",
											"// Set variables with generated values\r",
											"pm.variables.set(\"phone\", randomPhone);\r",
											"pm.variables.set(\"firstName\", randomFirstName);\r",
											"pm.variables.set(\"lastName\", randomLastName);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Retrieve the values used in the request\r",
											"let firstName = pm.variables.get(\"firstName\");\r",
											"let lastName = pm.variables.get(\"lastName\");\r",
											"let phone = pm.variables.get(\"phone\");\r",
											"\r",
											"// Set the values in the environment or collection\r",
											"pm.environment.set(\"firstName\", firstName);\r",
											"pm.environment.set(\"lastName\", lastName);\r",
											"pm.environment.set(\"phone\", phone);\r",
											"\r",
											"// Optionally, log the values to ensure they were set correctly\r",
											"console.log(\"First Name:\", firstName);\r",
											"console.log(\"Last Name:\", lastName);\r",
											"console.log(\"Phone:\", phone);\r",
											"\r",
											"\r",
											"pm.test(\"Verify 'message' is 'User updated successfully'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"User updated successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'success' is 'true'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.eql(true);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(8000);\r",
											"});\r",
											"\r",
											"// Define the expected fields\r",
											"const expectedFields = [\"data\", \"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\":{{newAdmin_id}},\r\n    \"firstName\":\"{{firstName}}\",\r\n    \"lastName\":\"{{lastName}}\",\r\n    \"status\":\"Active\",\r\n    \"phone\":{{phone}},\r\n    \"roleId\":1,\r\n    \"image\":\"4725963f-9f37-46df-a280-e1e52006a0f5.jpg\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}user-update",
									"host": [
										"{{base_url}}user-update"
									]
								}
							},
							"response": []
						},
						{
							"name": "user_list_after_update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 'userId' matches variable 'newAdmin_id'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedUserId = pm.variables.get(\"newAdmin_id\"); // Retrieve the value of the variable\r",
											"    pm.expect(jsonData.data[0].userId).to.eql(parseInt(expectedUserId)); // Ensure the comparison is accurate\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'message' is 'User data fetched'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"User data fetched\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"\r",
											"// Parse the response body\r",
											"let responseBody = pm.response.json();\r",
											"\r",
											"// Extract data from the response\r",
											"let responseFirstName = responseBody.data[0].firstName;\r",
											"let responseLastName = responseBody.data[0].lastName;\r",
											"let responsePhone = responseBody.data[0].phone;\r",
											"\r",
											"// Retrieve the stored variables\r",
											"let storedFirstName = pm.variables.get(\"firstName\"); // Get from local variable scope\r",
											"let storedLastName = pm.variables.get(\"lastName\");   // Get from local variable scope\r",
											"let storedPhone = pm.variables.get(\"phone\").toString(); // Convert storedPhone to string\r",
											"\r",
											"// Verify firstName\r",
											"pm.test(\"First Name is correct\", function () {\r",
											"    pm.expect(responseFirstName).to.eql(storedFirstName);\r",
											"});\r",
											"\r",
											"// Verify lastName\r",
											"pm.test(\"Last Name is correct\", function () {\r",
											"    pm.expect(responseLastName).to.eql(storedLastName);\r",
											"});\r",
											"\r",
											"// Verify phone\r",
											"pm.test(\"Phone is correct\", function () {\r",
											"    pm.expect(responsePhone).to.eql(storedPhone);\r",
											"});\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"data\", \"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that the 'data' field is an array and contains the expected fields within the first object\r",
											"pm.test(\"Verify that 'data' contains the expected fields\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"    \r",
											"    const user = actualResponse.data[0];\r",
											"    const userExpectedFields = [\"email\", \"firstName\", \"lastName\", \"image\", \"phone\", \"role\", \"roleId\", \"status\", \"userId\" ];\r",
											"    \r",
											"    userExpectedFields.forEach(field => {\r",
											"        pm.expect(user).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"// Extract the response JSON\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"// Check if the email is not null\r",
											"pm.test(\"Email is not null\", function () {\r",
											"    let email = jsonData.data[0].email;\r",
											"    pm.expect(email).to.not.be.null;\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// {\r\n//     \"roleId\":1\r\n// }\r\n\r\n{\r\n \"userId\":{{newAdmin_id}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}user-data",
									"host": [
										"{{base_url}}user-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "user-link",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 'message' is 'OTP sent successfully'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"OTP sent successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(8000);\r",
											"});\r",
											"\r",
											"// Define the expected fields\r",
											"const expectedFields = [\"data\", \"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\":{{Admin_id}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}user-link",
									"host": [
										"{{base_url}}user-link"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Dashboard",
					"item": [
						{
							"name": "dashboard",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 'message' is 'Dashboard data fetched successfully'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Dashboard data fetched successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'data' contains 'adminUserCount', 'appUserCount', 'questionCount', and 'surveyCount'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.have.property(\"adminUserCount\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"appUserCount\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"questionCount\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"surveyCount\");\r",
											"});\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}dashboard",
									"host": [
										"{{base_url}}dashboard"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "surveyor_grade",
					"item": [
						{
							"name": "surveyor-grades-add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random string of given length\r",
											"function generateRandomString(length) {\r",
											"    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"\r",
											"// Generate random values\r",
											"let randomsurveyorRank = generateRandomString(6);\r",
											"\r",
											"// Set variables with generated values\r",
											"pm.variables.set(\"surveyorRank\", randomsurveyorRank);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"surveyorRankId\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"surveyorRankId\", jsonData.data.surveyorRankId);\r",
											"});\r",
											"\r",
											"// Retrieve the values used in the request\r",
											"let surveyorRank = pm.variables.get(\"surveyorRank\");\r",
											"\r",
											"// Set the values in the environment or collection\r",
											"pm.environment.set(\"surveyorRank1\", surveyorRank);\r",
											"\r",
											"\r",
											"// Test script\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains success message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Surveyor Rank added successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains surveyorRankId\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.have.property(\"surveyorRankId\");\r",
											"    pm.expect(jsonData.data.surveyorRankId).to.be.a('number');\r",
											"});\r",
											"\r",
											"pm.test(\"Success is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'data' contains 'surveyorRankId'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.have.property(\"surveyorRankId\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"surveyorRank\":\"{{surveyorRank}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}surveyor-rank-add",
									"host": [
										"{{base_url}}surveyor-rank-add"
									]
								}
							},
							"response": []
						},
						{
							"name": "surveyor-grades-add-already-exists",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test script\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains errors\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0]).to.eql(\"This surveyor rank already exists.\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Success is false\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"\r",
											"// Define the expected fields\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"surveyorRank\":\"{{surveyorRank1}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}surveyor-rank-add",
									"host": [
										"{{base_url}}surveyor-rank-add"
									]
								}
							},
							"response": []
						},
						{
							"name": "surveyor-rank-data-after-add",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 'message' is 'Survey rank data retrieved successfully'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Surveyor rank data retrieved successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'data' contains 'surveyorRank' with string value\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data[0]).to.have.property(\"surveyorRank\");\r",
											"    pm.expect(jsonData.data[0].surveyorRank).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"\r",
											"// Parse the response body\r",
											"let responseBody = pm.response.json();\r",
											"\r",
											"// Extract data from the response\r",
											"let responsesurveyorRank = responseBody.data[0].surveyorRank;\r",
											"\r",
											"\r",
											"// Retrieve the stored variables\r",
											"let storedsurveyorRank = pm.variables.get(\"surveyorRank1\"); // Get from local variable scope\r",
											"\r",
											"\r",
											"// Verify surveyorRank\r",
											"pm.test(\"surveyorRank is correct\", function () {\r",
											"    pm.expect(responsesurveyorRank).to.eql(storedsurveyorRank);\r",
											"});\r",
											"\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that the 'data' field is an array and contains the expected fields within the first object\r",
											"pm.test(\"Verify that 'data' contains the expected fields\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"    \r",
											"    const user = actualResponse.data[0];\r",
											"    const userExpectedFields = [\"isActive\", \"surveyorRank\"];\r",
											"    \r",
											"    userExpectedFields.forEach(field => {\r",
											"        pm.expect(user).to.have.property(field)\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"surveyorRankId\": {{surveyorRankId}}\r\n}\r\n\r\n// {\r\n\r\n// }\r\n\r\n// {\r\n//     \"isActive\":0\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}surveyor-rank-data",
									"host": [
										"{{base_url}}surveyor-rank-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "surveyor-rank-data-after-add-is-active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Get the current isActive value from the environment\r",
											"let isActive = pm.environment.get(\"isActive\");\r",
											"\r",
											"// Define the expected response \r",
											"function validateDataIsPresent(response) {\r",
											"    pm.test(\"Response should have success set to true\", () => {\r",
											"        pm.expect(response.success).to.be.true;\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should have statusCode 200\", () => {\r",
											"        pm.expect(response.statusCode).to.eql(200);\r",
											"    });\r",
											"\r",
											"     // Check if the data array is not empty\r",
											"    if (response.data.length > 0) {\r",
											"        // Verify that the first element in the data array has the correct isActive value\r",
											"        pm.test(\"First data element should have isActive value matching the request\", () => {\r",
											"            pm.expect(response.data[0]).to.have.property('isActive', isActive);\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"// Define the expected response \r",
											"function validateNoDataIsPresent(response) {\r",
											"    pm.test(\"Response should have success set to true\", () => {\r",
											"        pm.expect(response.success).to.be.true;\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should have statusCode 200\", () => {\r",
											"        pm.expect(response.statusCode).to.eql(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should contain an empty data array\", () => {\r",
											"        pm.expect(response.data).to.be.an('array').that.is.empty;\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"// Parse the response\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Check if the isActive value is 0 or 1\r",
											"if ([0, 1].includes(isActive)) {\r",
											"    pm.test(`isActive is '${isActive}', validate response accordingly`, () => {\r",
											"        if (response.data && response.data.length > 0) {\r",
											"            validateDataIsPresent(response);\r",
											"        } else {\r",
											"            validateNoDataIsPresent(response);\r",
											"        }\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Unexpected isActive value\", () => {\r",
											"        pm.expect.fail(`Received unexpected isActive value: ${isActive}`);\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Get the current isActive value from the environment, or initialize it to 0\r",
											"let isActive = pm.environment.get(\"isActive\") || 0;\r",
											"\r",
											"// Toggle isActive between 0 and 1\r",
											"isActive = (isActive === 1) ? 0 : 1;\r",
											"\r",
											"// Set the updated isActive back to the environment\r",
											"pm.environment.set(\"isActive\", isActive);\r",
											"\r",
											"// Set the isActive in the request body\r",
											"let requestData = {\r",
											"    \"isActive\": isActive\r",
											"};\r",
											"\r",
											"// Update the request body with the new isActive value\r",
											"pm.request.body.raw = JSON.stringify(requestData);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// {\r\n//     \"surveyorRankId\": {{surveyorRankId}}\r\n// }\r\n\r\n// {\r\n\r\n// }\r\n\r\n{\r\n    \"isActive\":{{isActive}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}surveyor-rank-data",
									"host": [
										"{{base_url}}surveyor-rank-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "surveyor-rank-data-after-add-full",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"surveyorRank\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"surveyorRankFromList\", jsonData.data[0].surveyorRank);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify 'message' is 'Survey rank data retrieved successfully'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Surveyor rank data retrieved successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'data' contains 'surveyorRank' with string value\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data[0]).to.have.property(\"surveyorRank\");\r",
											"    pm.expect(jsonData.data[0].surveyorRank).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that the 'data' field is an array and contains the expected fields within the first object\r",
											"pm.test(\"Verify that 'data' contains the expected fields\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"    \r",
											"    const user = actualResponse.data[0];\r",
											"    const userExpectedFields = [\"createdBy\", \"isActive\", \"surveyorRank\", \"surveyorRankId\", \"updatedBy\"];\r",
											"    \r",
											"    userExpectedFields.forEach(field => {\r",
											"        pm.expect(user).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// {\r\n//     \"surveyorRankId\": {{surveyorRankId}}\r\n// }\r\n\r\n{\r\n\r\n}\r\n\r\n// {\r\n//     \"isActive\":0\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}surveyor-rank-data",
									"host": [
										"{{base_url}}surveyor-rank-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "surveyor-grades-update",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random string of given length\r",
											"function generateRandomString(length) {\r",
											"    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"\r",
											"// Generate random values\r",
											"let randomsurveyorRank = generateRandomString(6);\r",
											"\r",
											"// Set variables with generated values\r",
											"pm.variables.set(\"surveyorRank\", randomsurveyorRank);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Retrieve the values used in the request\r",
											"let surveyorRank = pm.variables.get(\"surveyorRank\");\r",
											"\r",
											"\r",
											"// Set the values in the environment or collection\r",
											"pm.environment.set(\"surveyorRank\", surveyorRank);\r",
											"\r",
											"\r",
											"// Optionally, log the values to ensure they were set correctly\r",
											"console.log(\"Survey Rank:\", surveyorRank);\r",
											"\r",
											"\r",
											"// Test script\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains success message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Surveyor rank updated successfully\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Success is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"// Define the expected fields\r",
											"const expectedFields = [\"data\", \"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"surveyorRankId\":{{surveyorRankId}},\r\n    \"surveyorRank\":\"{{surveyorRank}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}surveyor-rank-update",
									"host": [
										"{{base_url}}surveyor-rank-update"
									]
								}
							},
							"response": []
						},
						{
							"name": "surveyor-grades-update-already-exists",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test script\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains errors\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0]).to.eql(\"Surveyor rank already exists.\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Success is false\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"\r",
											"// Define the expected fields\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"surveyorRankId\":{{surveyorRankId}},\r\n    \"surveyorRank\":\"{{surveyorRankFromList}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}surveyor-rank-update",
									"host": [
										"{{base_url}}surveyor-rank-update"
									]
								}
							},
							"response": []
						},
						{
							"name": "surveyor-rank-data-after-update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 'message' is 'Survey rank data retrieved successfully'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Surveyor rank data retrieved successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'data' contains 'surveyorRank' with string value\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data[0]).to.have.property(\"surveyorRank\");\r",
											"    pm.expect(jsonData.data[0].surveyorRank).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"let responseBody = pm.response.json();\r",
											"\r",
											"// Extract data from the response\r",
											"let responsesurveyorRank = responseBody.data[0].surveyorRank;\r",
											"\r",
											"\r",
											"// Retrieve the stored variables\r",
											"let storedsurveyorRank = pm.variables.get(\"surveyorRank\"); // Get from local variable scope\r",
											"\r",
											"\r",
											"// Verify surveyorRank\r",
											"pm.test(\"surveyorRank is correct\", function () {\r",
											"    pm.expect(responsesurveyorRank).to.eql(storedsurveyorRank);\r",
											"});\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that the 'data' field is an array and contains the expected fields within the first object\r",
											"pm.test(\"Verify that 'data' contains the expected fields\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"    \r",
											"    const user = actualResponse.data[0];\r",
											"    const userExpectedFields = [\"isActive\", \"surveyorRank\"];\r",
											"    \r",
											"    userExpectedFields.forEach(field => {\r",
											"        pm.expect(user).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"surveyorRankId\": {{surveyorRankId}}\r\n}\r\n\r\n// {\r\n\r\n// }\r\n\r\n// {\r\n//     \"isActive\":0\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}surveyor-rank-data",
									"host": [
										"{{base_url}}surveyor-rank-data"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "survey-objective",
					"item": [
						{
							"name": "survey-objective-add",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"surveyObjectiveId\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"surveyObjectiveId\", jsonData.data.surveyObjectiveId);\r",
											"});\r",
											"\r",
											"// Retrieve the values used in the request\r",
											"let surveyObjective = pm.variables.get(\"surveyObjective\");\r",
											"\r",
											"// Set the values in the environment or collection\r",
											"pm.environment.set(\"surveyObjective1\", surveyObjective);\r",
											"\r",
											"\r",
											"\r",
											"// Test script\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains success message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Survey objective added successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains surveyObjectiveId\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.have.property(\"surveyObjectiveId\");\r",
											"    pm.expect(jsonData.data.surveyObjectiveId).to.be.a('number');\r",
											"});\r",
											"\r",
											"pm.test(\"Success is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'data' contains 'surveyObjectiveId'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.have.property(\"surveyObjectiveId\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random string of given length\r",
											"function generateRandomString(length) {\r",
											"    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"\r",
											"// Generate random values\r",
											"let randomsurveyObjective = generateRandomString(6);\r",
											"\r",
											"// Set variables with generated values\r",
											"pm.variables.set(\"surveyObjective\", randomsurveyObjective);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"surveyObjective\":\"{{surveyObjective}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}survey-objective-add",
									"host": [
										"{{base_url}}survey-objective-add"
									]
								}
							},
							"response": []
						},
						{
							"name": "survey-objective-add-already-exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test script\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains errors\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0]).to.eql(\"This survey objective already exists.\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Success is false\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"\r",
											"// Define the expected fields\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"surveyObjective\":\"{{surveyObjective1}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}survey-objective-add",
									"host": [
										"{{base_url}}survey-objective-add"
									]
								}
							},
							"response": []
						},
						{
							"name": "survey-objective-list-after-add",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 'message' is 'Survey objective data retrieved successfully'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Survey objective data retrieved successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'data' contains 'surveyObjective' with string value\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data[0]).to.have.property(\"surveyObjective\");\r",
											"    pm.expect(jsonData.data[0].surveyObjective).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"\r",
											"// Parse the response body\r",
											"let responseBody = pm.response.json();\r",
											"\r",
											"// Extract data from the response\r",
											"let responsesurveyObjective = responseBody.data[0].surveyObjective;\r",
											"\r",
											"\r",
											"// Retrieve the stored variables\r",
											"let storedsurveyObjective = pm.variables.get(\"surveyObjective1\"); // Get from local variable scope\r",
											"\r",
											"// Verify surveyorRank\r",
											"pm.test(\"surveyObjective is correct\", function () {\r",
											"    pm.expect(responsesurveyObjective).to.eql(storedsurveyObjective);\r",
											"});\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that the 'data' field is an array and contains the expected fields within the first object\r",
											"pm.test(\"Verify that 'data' contains the expected fields\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"    \r",
											"    const user = actualResponse.data[0];\r",
											"    const userExpectedFields = [\"surveyObjective\"];\r",
											"    \r",
											"    userExpectedFields.forEach(field => {\r",
											"        pm.expect(user).to.have.property(field);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n     \"surveyObjectiveId\": {{surveyObjectiveId}}\r\n}\r\n\r\n// {\r\n   \r\n// }\r\n\r\n// {\r\n//     \"isActive\":0\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}survey-objective-data",
									"host": [
										"{{base_url}}survey-objective-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "survey-objective-list-after-add-isActive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Get the current isActive value from the environment\r",
											"let isActive = pm.environment.get(\"isActive\");\r",
											"\r",
											"// Define the expected response \r",
											"function validateDataIsPresent(response) {\r",
											"    pm.test(\"Response should have success set to true\", () => {\r",
											"        pm.expect(response.success).to.be.true;\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should have statusCode 200\", () => {\r",
											"        pm.expect(response.statusCode).to.eql(200);\r",
											"    });\r",
											"\r",
											"     // Check if the data array is not empty\r",
											"    if (response.data.length > 0) {\r",
											"        // Verify that the first element in the data array has the correct isActive value\r",
											"        pm.test(\"First data element should have isActive value matching the request\", () => {\r",
											"            pm.expect(response.data[0]).to.have.property('isActive', isActive);\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"// Define the expected response \r",
											"function validateNoDataIsPresent(response) {\r",
											"    pm.test(\"Response should have success set to true\", () => {\r",
											"        pm.expect(response.success).to.be.true;\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should have statusCode 200\", () => {\r",
											"        pm.expect(response.statusCode).to.eql(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should contain an empty data array\", () => {\r",
											"        pm.expect(response.data).to.be.an('array').that.is.empty;\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"// Parse the response\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Check if the isActive value is 0 or 1\r",
											"if ([0, 1].includes(isActive)) {\r",
											"    pm.test(`isActive is '${isActive}', validate response accordingly`, () => {\r",
											"        if (response.data && response.data.length > 0) {\r",
											"            validateDataIsPresent(response);\r",
											"        } else {\r",
											"            validateNoDataIsPresent(response);\r",
											"        }\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Unexpected isActive value\", () => {\r",
											"        pm.expect.fail(`Received unexpected isActive value: ${isActive}`);\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Get the current isActive value from the environment, or initialize it to 0\r",
											"let isActive = pm.environment.get(\"isActive\") || 0;\r",
											"\r",
											"// Toggle isActive between 0 and 1\r",
											"isActive = (isActive === 1) ? 0 : 1;\r",
											"\r",
											"// Set the updated isActive back to the environment\r",
											"pm.environment.set(\"isActive\", isActive);\r",
											"\r",
											"// Set the isActive in the request body\r",
											"let requestData = {\r",
											"    \"isActive\": isActive\r",
											"};\r",
											"\r",
											"// Update the request body with the new isActive value\r",
											"pm.request.body.raw = JSON.stringify(requestData);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// {\r\n//      \"surveyObjectiveId\": {{surveyObjectiveId}}\r\n// }\r\n\r\n// {\r\n   \r\n// }\r\n\r\n{\r\n    \"isActive\":{{isActive}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}survey-objective-data",
									"host": [
										"{{base_url}}survey-objective-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "survey-objective-list-after-add-full",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"surveyObjective\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"surveyObjectiveFromList\", jsonData.data[0].surveyObjective);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'message' is 'Survey objective data retrieved successfully'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Survey objective data retrieved successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that the 'data' field is an array and contains the expected fields within the first object\r",
											"pm.test(\"Verify that 'data' contains the expected fields\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"    \r",
											"    const user = actualResponse.data[0];\r",
											"    const userExpectedFields = [\"createdBy\", \"isActive\", \"surveyObjective\", \"surveyObjectiveId\", \"updatedBy\"];\r",
											"    \r",
											"    userExpectedFields.forEach(field => {\r",
											"        pm.expect(user).to.have.property(field);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// {\r\n//      \"surveyObjectiveId\": {{surveyObjectiveId}}\r\n// }\r\n\r\n{\r\n   \r\n}\r\n\r\n// {\r\n//     \"isActive\":0\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}survey-objective-data",
									"host": [
										"{{base_url}}survey-objective-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "survey-objective-update",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random string of given length\r",
											"function generateRandomString(length) {\r",
											"    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"\r",
											"// Generate random values\r",
											"let randomsurveyObjective = generateRandomString(6);\r",
											"\r",
											"// Set variables with generated values\r",
											"pm.variables.set(\"surveyObjective\", randomsurveyObjective);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Retrieve the value used in the request\r",
											"let surveyObjective = pm.variables.get(\"surveyObjective\");\r",
											"\r",
											"// Set the value in the environment or collection\r",
											"pm.environment.set(\"surveyObjective\", surveyObjective);\r",
											"\r",
											"// Optionally, log the value to ensure it was set correctly\r",
											"console.log(\"surveyObjective:\", surveyObjective);\r",
											"\r",
											"\r",
											"// Test script\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains success message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Survey objective updated successfully\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Success is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"// Define the expected fields\r",
											"const expectedFields = [\"data\", \"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"surveyObjective\": \"{{surveyObjective}}\",\r\n  \"surveyObjectiveId\": {{surveyObjectiveId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}survey-objective-update",
									"host": [
										"{{base_url}}survey-objective-update"
									]
								}
							},
							"response": []
						},
						{
							"name": "survey-objective-update-already-exists",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test script\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains errors\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0]).to.eql(\"Survey objective name already exists.\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Success is false\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"\r",
											"// Define the expected fields\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"surveyObjective\": \"{{surveyObjectiveFromList}}\",\r\n  \"surveyObjectiveId\": {{surveyObjectiveId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}survey-objective-update",
									"host": [
										"{{base_url}}survey-objective-update"
									]
								}
							},
							"response": []
						},
						{
							"name": "survey-objective-list-after-update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 'message' is 'Survey objective data retrieved successfully'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Survey objective data retrieved successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'data' contains 'surveyObjective' with string value\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data[0]).to.have.property(\"surveyObjective\");\r",
											"    pm.expect(jsonData.data[0].surveyObjective).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"let responseBody = pm.response.json();\r",
											"\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that the 'data' field is an array and contains the expected fields within the first object\r",
											"pm.test(\"Verify that 'data' contains the expected fields\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"    \r",
											"    const user = actualResponse.data[0];\r",
											"    const userExpectedFields = [\"surveyObjective\"];\r",
											"    \r",
											"    userExpectedFields.forEach(field => {\r",
											"        pm.expect(user).to.have.property(field);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n     \"surveyObjectiveId\": {{surveyObjectiveId}}\r\n}\r\n\r\n// {\r\n   \r\n// }\r\n\r\n// {\r\n//     \"isActive\":0\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}survey-objective-data",
									"host": [
										"{{base_url}}survey-objective-data"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "assessment-method",
					"item": [
						{
							"name": "assessment-guideline-add",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"assessmentGudlineId\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"assessmentGudlineId\", jsonData.data.assessmentGudlineId);\r",
											"});\r",
											"\r",
											"// Retrieve the values used in the request\r",
											"let assessmentGuideline = pm.variables.get(\"assessmentGuideline\");\r",
											"\r",
											"// Set the values in the environment or collection\r",
											"pm.environment.set(\"assessmentGuideline1\", assessmentGuideline);\r",
											"\r",
											"// Test script\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains success message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Assessment guideline added successfully.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains assessmentGudlineId\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.have.property(\"assessmentGudlineId\");\r",
											"    pm.expect(jsonData.data.assessmentGudlineId).to.be.a('number');\r",
											"});\r",
											"\r",
											"pm.test(\"Success is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'data' contains 'assessmentGudlineId'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.have.property(\"assessmentGudlineId\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random string of given length\r",
											"function generateRandomString(length) {\r",
											"    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"\r",
											"// Generate random values\r",
											"let randomassessmentGuideline = generateRandomString(6);\r",
											"\r",
											"// Set variables with generated values\r",
											"pm.variables.set(\"assessmentGuideline\", randomassessmentGuideline);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"assessmentGuideline\":\"{{assessmentGuideline}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}assessment-guideline-add",
									"host": [
										"{{base_url}}assessment-guideline-add"
									]
								}
							},
							"response": []
						},
						{
							"name": "assessment-guideline-add-already-exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test script\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains errors\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0]).to.eql(\"Assessment guideline already exists.\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Success is false\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"\r",
											"// Define the expected fields\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"assessmentGuideline\":\"{{assessmentGuideline1}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}assessment-guideline-add",
									"host": [
										"{{base_url}}assessment-guideline-add"
									]
								}
							},
							"response": []
						},
						{
							"name": "assessment-guideline-list-after-add",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 'message' is 'Assessment guideline fetched successfully'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Assessment guideline fetched successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'data' contains 'assessmentGuideline' with string value\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data[0]).to.have.property(\"assessmentGuideline\");\r",
											"    pm.expect(jsonData.data[0].assessmentGuideline).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"let responseBody = pm.response.json();\r",
											"\r",
											"// Extract data from the response\r",
											"let responseassessmentGuideline = responseBody.data[0].assessmentGuideline;\r",
											"\r",
											"// Retrieve the stored variables\r",
											"let storedassessmentGuideline = pm.variables.get(\"assessmentGuideline1\"); // Get from local variable scope\r",
											"\r",
											"// Verify surveyorRank\r",
											"pm.test(\"assessmentGuideline is correct\", function () {\r",
											"    pm.expect(responseassessmentGuideline).to.eql(storedassessmentGuideline);\r",
											"});\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that the 'data' field is an array and contains the expected fields within the first object\r",
											"pm.test(\"Verify that 'data' contains the expected fields\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"    \r",
											"    const user = actualResponse.data[0];\r",
											"    const userExpectedFields = [\"assessmentGuideline\"];\r",
											"    \r",
											"    userExpectedFields.forEach(field => {\r",
											"        pm.expect(user).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"assessmentGuidelineId\": {{assessmentGudlineId}}\r\n}\r\n\r\n// {\r\n \r\n// }\r\n\r\n// {\r\n//     \"isActive\":0\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}assessment-guideline-data",
									"host": [
										"{{base_url}}assessment-guideline-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "assessment-guideline-list-after-add-isActive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Get the current isActive value from the environment\r",
											"let isActive = pm.environment.get(\"isActive\");\r",
											"\r",
											"// Define the expected response \r",
											"function validateDataIsPresent(response) {\r",
											"    pm.test(\"Response should have success set to true\", () => {\r",
											"        pm.expect(response.success).to.be.true;\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should have statusCode 200\", () => {\r",
											"        pm.expect(response.statusCode).to.eql(200);\r",
											"    });\r",
											"\r",
											"     // Check if the data array is not empty\r",
											"    if (response.data.length > 0) {\r",
											"        // Verify that the first element in the data array has the correct isActive value\r",
											"        pm.test(\"First data element should have isActive value matching the request\", () => {\r",
											"            pm.expect(response.data[0]).to.have.property('isActive', isActive);\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"// Define the expected response \r",
											"function validateNoDataIsPresent(response) {\r",
											"    pm.test(\"Response should have success set to true\", () => {\r",
											"        pm.expect(response.success).to.be.true;\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should have statusCode 200\", () => {\r",
											"        pm.expect(response.statusCode).to.eql(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should contain an empty data array\", () => {\r",
											"        pm.expect(response.data).to.be.an('array').that.is.empty;\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"// Parse the response\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Check if the isActive value is 0 or 1\r",
											"if ([0, 1].includes(isActive)) {\r",
											"    pm.test(`isActive is '${isActive}', validate response accordingly`, () => {\r",
											"        if (response.data && response.data.length > 0) {\r",
											"            validateDataIsPresent(response);\r",
											"        } else {\r",
											"            validateNoDataIsPresent(response);\r",
											"        }\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Unexpected isActive value\", () => {\r",
											"        pm.expect.fail(`Received unexpected isActive value: ${isActive}`);\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Get the current isActive value from the environment, or initialize it to 0\r",
											"let isActive = pm.environment.get(\"isActive\") || 0;\r",
											"\r",
											"// Toggle isActive between 0 and 1\r",
											"isActive = (isActive === 1) ? 0 : 1;\r",
											"\r",
											"// Set the updated isActive back to the environment\r",
											"pm.environment.set(\"isActive\", isActive);\r",
											"\r",
											"// Set the isActive in the request body\r",
											"let requestData = {\r",
											"    \"isActive\": isActive\r",
											"};\r",
											"\r",
											"// Update the request body with the new isActive value\r",
											"pm.request.body.raw = JSON.stringify(requestData);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// {\r\n//     \"assessmentGuidelineId\": {{assessmentGudlineId}}\r\n// }\r\n\r\n// {\r\n \r\n// }\r\n\r\n{\r\n    \"isActive\":{{isActive}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}assessment-guideline-data",
									"host": [
										"{{base_url}}assessment-guideline-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "assessment-guideline-list-after-add-full",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"assessmentGuideline\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"assessmentGuidelineFromList\", jsonData.data[0].assessmentGuideline);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'message' is 'Assessment guideline fetched successfully'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Assessment guideline fetched successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'data' contains 'assessmentGuideline' with string value\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data[0]).to.have.property(\"assessmentGuideline\");\r",
											"    pm.expect(jsonData.data[0].assessmentGuideline).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that the 'data' field is an array and contains the expected fields within the first object\r",
											"pm.test(\"Verify that 'data' contains the expected fields\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"    \r",
											"    const user = actualResponse.data[0];\r",
											"    const userExpectedFields = [\"createdBy\", \"isActive\", \"assessmentGuideline\", \"assessmentGuidelineId\", \"updatedBy\"];\r",
											"    \r",
											"    userExpectedFields.forEach(field => {\r",
											"        pm.expect(user).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// {\r\n//     \"assessmentGuidelineId\": {{assessmentGudlineId}}\r\n// }\r\n\r\n{\r\n \r\n}\r\n\r\n// {\r\n//     \"isActive\":0\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}assessment-guideline-data",
									"host": [
										"{{base_url}}assessment-guideline-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "assessment-guideline-update",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random string of given length\r",
											"function generateRandomString(length) {\r",
											"    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"\r",
											"// Generate random values\r",
											"let randomassessmentGuideline = generateRandomString(6);\r",
											"\r",
											"// Set variables with generated values\r",
											"pm.variables.set(\"assessmentGuideline\", randomassessmentGuideline);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test script\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains success message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Assessment guideline updated successfully\");\r",
											"});\r",
											"\r",
											"// Define the expected fields\r",
											"const expectedFields = [\"data\", \"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Success is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"// Retrieve the value used in the request\r",
											"let assessmentGuideline = pm.variables.get(\"assessmentGuideline\");\r",
											"\r",
											"// Set the value in the environment or collection\r",
											"pm.environment.set(\"assessmentGuideline\", assessmentGuideline);\r",
											"\r",
											"// Optionally, log the value to ensure it was set correctly\r",
											"console.log(\"assessmentGuideline:\", assessmentGuideline);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n \"assessmentGuidelineId\": {{assessmentGudlineId}},\r\n \"assessmentGuideline\":\"{{assessmentGuideline}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}assessment-guideline-update",
									"host": [
										"{{base_url}}assessment-guideline-update"
									]
								}
							},
							"response": []
						},
						{
							"name": "assessment-guideline-update-already-exists",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random string of given length\r",
											"function generateRandomString(length) {\r",
											"    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"\r",
											"// Generate random values\r",
											"let randomassessmentGuideline = generateRandomString(6);\r",
											"\r",
											"// Set variables with generated values\r",
											"pm.variables.set(\"assessmentGuideline\", randomassessmentGuideline);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test script\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains errors\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0]).to.eql(\"Assessment guideline already exists.\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Success is false\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"\r",
											"// Define the expected fields\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n \"assessmentGuidelineId\": {{assessmentGudlineId}},\r\n \"assessmentGuideline\":\"{{assessmentGuidelineFromList}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}assessment-guideline-update",
									"host": [
										"{{base_url}}assessment-guideline-update"
									]
								}
							},
							"response": []
						},
						{
							"name": "assessment-guideline-list-after-update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 'message' is 'Assessment guideline fetched successfully'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Assessment guideline fetched successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'data' contains 'assessmentGuideline' with string value\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data[0]).to.have.property(\"assessmentGuideline\");\r",
											"    pm.expect(jsonData.data[0].assessmentGuideline).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"let responseBody = pm.response.json();\r",
											"\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that the 'data' field is an array and contains the expected fields within the first object\r",
											"pm.test(\"Verify that 'data' contains the expected fields\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"    \r",
											"    const user = actualResponse.data[0];\r",
											"    const userExpectedFields = [\"assessmentGuideline\"];\r",
											"    \r",
											"    userExpectedFields.forEach(field => {\r",
											"        pm.expect(user).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"assessmentGuidelineId\": {{assessmentGudlineId}}\r\n}\r\n\r\n// {\r\n \r\n// }\r\n\r\n// {\r\n//     \"isActive\":0\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}assessment-guideline-data",
									"host": [
										"{{base_url}}assessment-guideline-data"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "country",
					"item": [
						{
							"name": "countries-add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random string of given length\r",
											"function generateRandomString(length) {\r",
											"    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"\r",
											"// Generate random values\r",
											"let randomcountryName = generateRandomString(6);\r",
											"\r",
											"// Set variables with generated values\r",
											"pm.variables.set(\"countryName\", randomcountryName);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"countryId\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"countryId\", jsonData.data.countryId);\r",
											"});\r",
											"\r",
											"\r",
											"// Test script\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains success message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Country added successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains countryId\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.have.property(\"countryId\");\r",
											"    pm.expect(jsonData.data.countryId).to.be.a('number');\r",
											"});\r",
											"\r",
											"pm.test(\"Success is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"// Retrieve the values used in the request\r",
											"let countryName = pm.variables.get(\"countryName\");\r",
											"\r",
											"// Set the values in the environment or collection\r",
											"pm.environment.set(\"countryName1\", countryName);\r",
											"\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'data' contains 'countryId'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.have.property(\"countryId\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n \"countryName\":\"{{countryName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}country-add",
									"host": [
										"{{base_url}}country-add"
									]
								}
							},
							"response": []
						},
						{
							"name": "countries-add-already-exists",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test script\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains errors\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0]).to.eql(\"This country already exists.\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Success is false\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"\r",
											"// Define the expected fields\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n \"countryName\":\"{{countryName1}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}country-add",
									"host": [
										"{{base_url}}country-add"
									]
								}
							},
							"response": []
						},
						{
							"name": "countries-list-after-add",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 'message' is 'Country fetched successfully'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Country fetched successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'data' contains 'countryName' with string value\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data[0]).to.have.property(\"countryName\");\r",
											"    pm.expect(jsonData.data[0].countryName).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"let responseBody = pm.response.json();\r",
											"\r",
											"// Extract data from the response\r",
											"let responsecountryName = responseBody.data[0].countryName;\r",
											"\r",
											"// Retrieve the stored variables\r",
											"let storedcountryName = pm.variables.get(\"countryName1\"); // Get from local variable scope\r",
											"\r",
											"// Verify surveyorRank\r",
											"pm.test(\"countryName is correct\", function () {\r",
											"    pm.expect(responsecountryName).to.eql(storedcountryName);\r",
											"});\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that the 'data' field is an array and contains the expected fields within the first object\r",
											"pm.test(\"Verify that 'data' contains the expected fields\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"    \r",
											"    const user = actualResponse.data[0];\r",
											"    const userExpectedFields = [\"countryName\", \"isActive\"];\r",
											"    \r",
											"    userExpectedFields.forEach(field => {\r",
											"        pm.expect(user).to.have.property(field);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n \"countryId\": {{countryId}}\r\n}\r\n\r\n// {\r\n\r\n// }\r\n\r\n// {\r\n//     \"isActive\":1\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}country-data",
									"host": [
										"{{base_url}}country-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "countries-list-after-add-isActive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Get the current isActive value from the environment\r",
											"let isActive = pm.environment.get(\"isActive\");\r",
											"\r",
											"// Define the expected response \r",
											"function validateDataIsPresent(response) {\r",
											"    pm.test(\"Response should have success set to true\", () => {\r",
											"        pm.expect(response.success).to.be.true;\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should have statusCode 200\", () => {\r",
											"        pm.expect(response.statusCode).to.eql(200);\r",
											"    });\r",
											"\r",
											"     // Check if the data array is not empty\r",
											"    if (response.data.length > 0) {\r",
											"        // Verify that the first element in the data array has the correct isActive value\r",
											"        pm.test(\"First data element should have isActive value matching the request\", () => {\r",
											"            pm.expect(response.data[0]).to.have.property('isActive', isActive);\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"// Define the expected response \r",
											"function validateNoDataIsPresent(response) {\r",
											"    pm.test(\"Response should have success set to true\", () => {\r",
											"        pm.expect(response.success).to.be.true;\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should have statusCode 200\", () => {\r",
											"        pm.expect(response.statusCode).to.eql(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should contain an empty data array\", () => {\r",
											"        pm.expect(response.data).to.be.an('array').that.is.empty;\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"// Parse the response\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Check if the isActive value is 0 or 1\r",
											"if ([0, 1].includes(isActive)) {\r",
											"    pm.test(`isActive is '${isActive}', validate response accordingly`, () => {\r",
											"        if (response.data && response.data.length > 0) {\r",
											"            validateDataIsPresent(response);\r",
											"        } else {\r",
											"            validateNoDataIsPresent(response);\r",
											"        }\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Unexpected isActive value\", () => {\r",
											"        pm.expect.fail(`Received unexpected isActive value: ${isActive}`);\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Get the current isActive value from the environment, or initialize it to 0\r",
											"let isActive = pm.environment.get(\"isActive\") || 0;\r",
											"\r",
											"// Toggle isActive between 0 and 1\r",
											"isActive = (isActive === 1) ? 0 : 1;\r",
											"\r",
											"// Set the updated isActive back to the environment\r",
											"pm.environment.set(\"isActive\", isActive);\r",
											"\r",
											"// Set the isActive in the request body\r",
											"let requestData = {\r",
											"    \"isActive\": isActive\r",
											"};\r",
											"\r",
											"// Update the request body with the new isActive value\r",
											"pm.request.body.raw = JSON.stringify(requestData);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// {\r\n//  \"countryId\": {{countryId}}\r\n// }\r\n\r\n// {\r\n\r\n// }\r\n\r\n{\r\n    \"isActive\":{{isActive}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}country-data",
									"host": [
										"{{base_url}}country-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "countries-list-after-add-full",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"countryName\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"countryNameFromList\", jsonData.data[0].countryName);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'message' is 'Country fetched successfully'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Country fetched successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'data' contains 'countryName' with string value\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data[0]).to.have.property(\"countryName\");\r",
											"    pm.expect(jsonData.data[0].countryName).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that the 'data' field is an array and contains the expected fields within the first object\r",
											"pm.test(\"Verify that 'data' contains the expected fields\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"    \r",
											"    const user = actualResponse.data[0];\r",
											"    const userExpectedFields = [\"countryId\", \"countryName\", \"createdBy\", \"isActive\", \"updatedBy\"];\r",
											"    \r",
											"    userExpectedFields.forEach(field => {\r",
											"        pm.expect(user).to.have.property(field);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// {\r\n//  \"countryId\": {{countryId}}\r\n// }\r\n\r\n{\r\n\r\n}\r\n\r\n// {\r\n//     \"isActive\":1\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}country-data",
									"host": [
										"{{base_url}}country-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "countries-update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test script\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains success message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Country updated successfully\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Success is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"// Retrieve the value used in the request\r",
											"let countryName = pm.variables.get(\"countryName\");\r",
											"\r",
											"// Set the value in the environment or collection\r",
											"pm.environment.set(\"countryName\", countryName);\r",
											"\r",
											"// Optionally, log the value to ensure it was set correctly\r",
											"console.log(\"countryName:\", countryName);\r",
											"\r",
											"// Define the expected fields\r",
											"const expectedFields = [\"data\", \"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random string of given length\r",
											"function generateRandomString(length) {\r",
											"    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"\r",
											"// Generate random values\r",
											"let randomcountryName = generateRandomString(6);\r",
											"\r",
											"// Set variables with generated values\r",
											"pm.variables.set(\"countryName\", randomcountryName);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"countryId\":{{countryId}},\r\n    \"countryName\":\"{{countryName}}\"\r\n}\r\n\r\n// {\r\n//     \"countryId\":1559032694,\r\n//     \"isActive\": 1\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}country-update",
									"host": [
										"{{base_url}}country-update"
									]
								}
							},
							"response": []
						},
						{
							"name": "countries-update-already-exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test script\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains errors\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0]).to.eql(\"Country name already exists.\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Success is false\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"\r",
											"// Define the expected fields\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"countryId\":{{countryId}},\r\n        \"countryName\":\"{{countryNameFromList}}\"\r\n}\r\n\r\n// {\r\n//     \"countryId\":1559032694,\r\n//     \"isActive\": 1\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}country-update",
									"host": [
										"{{base_url}}country-update"
									]
								}
							},
							"response": []
						},
						{
							"name": "countries-list-after-update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 'message' is 'Country fetched successfully'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Country fetched successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'data' contains 'countryName' with string value\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data[0]).to.have.property(\"countryName\");\r",
											"    pm.expect(jsonData.data[0].countryName).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"let responseBody = pm.response.json();\r",
											"\r",
											"// Extract data from the response\r",
											"let responsecountryName = responseBody.data[0].countryName;\r",
											"\r",
											"\r",
											"// Retrieve the stored variables\r",
											"let storedcountryName = pm.variables.get(\"countryName\"); // Get from local variable scope\r",
											"\r",
											"\r",
											"// Verify countryName\r",
											"pm.test(\"countryName is correct\", function () {\r",
											"    pm.expect(responsecountryName).to.eql(storedcountryName);\r",
											"});\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that the 'data' field is an array and contains the expected fields within the first object\r",
											"pm.test(\"Verify that 'data' contains the expected fields\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"    \r",
											"    const user = actualResponse.data[0];\r",
											"    const userExpectedFields = [\"countryName\", \"isActive\"];\r",
											"    \r",
											"    userExpectedFields.forEach(field => {\r",
											"        pm.expect(user).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n \"countryId\": {{countryId}}\r\n}\r\n\r\n// {\r\n\r\n// }\r\n\r\n// {\r\n//     \"isActive\":1\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}country-data",
									"host": [
										"{{base_url}}country-data"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "State",
					"item": [
						{
							"name": "state-add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random string of given length\r",
											"function generateRandomString(length) {\r",
											"    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"\r",
											"// Generate random values\r",
											"let randomstateName = generateRandomString(6);\r",
											"\r",
											"// Set variables with generated values\r",
											"pm.variables.set(\"stateName\", randomstateName);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"stateId\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"stateId\", jsonData.data.stateId);\r",
											"});\r",
											"\r",
											"\r",
											"// Test script\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains success message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"state added successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains stateId\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.have.property(\"stateId\");\r",
											"    pm.expect(jsonData.data.stateId).to.be.a('number');\r",
											"});\r",
											"\r",
											"pm.test(\"Success is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"// Retrieve the values used in the request\r",
											"let stateName = pm.variables.get(\"stateName\");\r",
											"\r",
											"// Set the values in the environment or collection\r",
											"pm.environment.set(\"stateName1\", stateName);\r",
											"\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'data' contains 'stateId'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.have.property(\"stateId\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"countryId\": {{countryId}},\r\n    \"stateName\": \"{{stateName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}state-add",
									"host": [
										"{{base_url}}state-add"
									]
								}
							},
							"response": []
						},
						{
							"name": "state-add-already-exists",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test script\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains errors\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0]).to.eql(\"state already exists.\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Success is false\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"\r",
											"// Define the expected fields\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"countryId\": {{countryId}},\r\n    \"stateName\": \"{{stateName1}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}state-add",
									"host": [
										"{{base_url}}state-add"
									]
								}
							},
							"response": []
						},
						{
							"name": "state-data-after-add",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 'message' is 'State data fetched successfully'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"State data fetched successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'data' contains 'stateName' with string value\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data[0]).to.have.property(\"stateName\");\r",
											"    pm.expect(jsonData.data[0].stateName).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"let responseBody = pm.response.json();\r",
											"\r",
											"// Extract data from the response\r",
											"let responsestateName = responseBody.data[0].stateName;\r",
											"\r",
											"// Retrieve the stored variables\r",
											"let storedstateName = pm.variables.get(\"stateName1\"); // Get from local variable scope\r",
											"\r",
											"// Verify surveyorRank\r",
											"pm.test(\"stateName is correct\", function () {\r",
											"    pm.expect(responsestateName).to.eql(storedstateName);\r",
											"});\r",
											"\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that 'data' is an array and contains at least one item\r",
											"pm.test(\"Verify 'data' is an array and contains at least one item\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"});\r",
											"\r",
											"// Access the first item in the 'data' array\r",
											"const firstDataItem = actualResponse.data[0];\r",
											"\r",
											"// Verify 'country', 'createdBy', 'isActive', 'stateId', 'stateName', and 'updatedBy' in the first data item\r",
											"pm.test(\"Verify 'country', 'createdBy', 'isActive', 'stateId', 'stateName', and 'updatedBy' in the first data item\", function () {\r",
											"    pm.expect(firstDataItem).to.have.property(\"country\").that.is.an(\"object\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"createdBy\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"isActive\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"stateId\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"stateName\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"updatedBy\");\r",
											"});\r",
											"\r",
											"// Access the 'country' object within the first data item\r",
											"const countryObject = firstDataItem.country;\r",
											"\r",
											"// Verify 'countryId', 'countryName', and 'isActive' in the 'country' object\r",
											"pm.test(\"Verify 'countryId', 'countryName', and 'isActive' in the 'country' object\", function () {\r",
											"    pm.expect(countryObject).to.have.property(\"countryId\");\r",
											"    pm.expect(countryObject).to.have.property(\"countryName\");\r",
											"    pm.expect(countryObject).to.have.property(\"isActive\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"stateId\": {{stateId}}\r\n}\r\n\r\n// {\r\n\r\n// }\r\n\r\n// {\r\n//     \"isActive\":1\r\n// }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}state-data",
									"host": [
										"{{base_url}}state-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "state-data-after-add-isActive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Get the current isActive value from the environment\r",
											"let isActive = pm.environment.get(\"isActive\");\r",
											"\r",
											"// Define the expected response \r",
											"function validateDataIsPresent(response) {\r",
											"    pm.test(\"Response should have success set to true\", () => {\r",
											"        pm.expect(response.success).to.be.true;\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should have statusCode 200\", () => {\r",
											"        pm.expect(response.statusCode).to.eql(200);\r",
											"    });\r",
											"\r",
											"     // Check if the data array is not empty\r",
											"    if (response.data.length > 0) {\r",
											"        // Verify that the first element in the data array has the correct isActive value\r",
											"        pm.test(\"First data element should have isActive value matching the request\", () => {\r",
											"            pm.expect(response.data[0]).to.have.property('isActive', isActive);\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"// Define the expected response \r",
											"function validateNoDataIsPresent(response) {\r",
											"    pm.test(\"Response should have success set to true\", () => {\r",
											"        pm.expect(response.success).to.be.true;\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should have statusCode 200\", () => {\r",
											"        pm.expect(response.statusCode).to.eql(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should contain an empty data array\", () => {\r",
											"        pm.expect(response.data).to.be.an('array').that.is.empty;\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"// Parse the response\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Check if the isActive value is 0 or 1\r",
											"if ([0, 1].includes(isActive)) {\r",
											"    pm.test(`isActive is '${isActive}', validate response accordingly`, () => {\r",
											"        if (response.data && response.data.length > 0) {\r",
											"            validateDataIsPresent(response);\r",
											"        } else {\r",
											"            validateNoDataIsPresent(response);\r",
											"        }\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Unexpected isActive value\", () => {\r",
											"        pm.expect.fail(`Received unexpected isActive value: ${isActive}`);\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Get the current isActive value from the environment, or initialize it to 0\r",
											"let isActive = pm.environment.get(\"isActive\") || 0;\r",
											"\r",
											"// Toggle isActive between 0 and 1\r",
											"isActive = (isActive === 1) ? 0 : 1;\r",
											"\r",
											"// Set the updated isActive back to the environment\r",
											"pm.environment.set(\"isActive\", isActive);\r",
											"\r",
											"// Set the isActive in the request body\r",
											"let requestData = {\r",
											"    \"isActive\": isActive\r",
											"};\r",
											"\r",
											"// Update the request body with the new isActive value\r",
											"pm.request.body.raw = JSON.stringify(requestData);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// {\r\n//         \"stateId\": {{stateId}}\r\n// }\r\n\r\n// {\r\n\r\n// }\r\n\r\n{\r\n    \"isActive\":{{isActive}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}state-data",
									"host": [
										"{{base_url}}state-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "state-data-after-add-full",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"stateName\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"stateNameFromList\", jsonData.data[0].stateName);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'message' is 'State data fetched successfully'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"State data fetched successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'data' contains 'stateName' with string value\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data[0]).to.have.property(\"stateName\");\r",
											"    pm.expect(jsonData.data[0].stateName).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that 'data' is an array and contains at least one item\r",
											"pm.test(\"Verify 'data' is an array and contains at least one item\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"});\r",
											"\r",
											"// Access the first item in the 'data' array\r",
											"const firstDataItem = actualResponse.data[0];\r",
											"\r",
											"// Verify 'country', 'createdBy', 'isActive', 'stateId', 'stateName', and 'updatedBy' in the first data item\r",
											"pm.test(\"Verify 'country', 'createdBy', 'isActive', 'stateId', 'stateName', and 'updatedBy' in the first data item\", function () {\r",
											"    pm.expect(firstDataItem).to.have.property(\"country\").that.is.an(\"object\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"createdBy\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"isActive\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"stateId\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"stateName\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"updatedBy\");\r",
											"});\r",
											"\r",
											"// Access the 'country' object within the first data item\r",
											"const countryObject = firstDataItem.country;\r",
											"\r",
											"// Verify 'countryId', 'countryName', and 'isActive' in the 'country' object\r",
											"pm.test(\"Verify 'countryId', 'countryName', and 'isActive' in the 'country' object\", function () {\r",
											"    pm.expect(countryObject).to.have.property(\"countryId\");\r",
											"    pm.expect(countryObject).to.have.property(\"countryName\");\r",
											"    pm.expect(countryObject).to.have.property(\"isActive\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// {\r\n//         \"stateId\": {{stateId}}\r\n// }\r\n\r\n{\r\n\r\n}\r\n\r\n// {\r\n//     \"isActive\":1\r\n// }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}state-data",
									"host": [
										"{{base_url}}state-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "state-update",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random string of given length\r",
											"function generateRandomString(length) {\r",
											"    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"\r",
											"// Generate random values\r",
											"let randomstateName = generateRandomString(6);\r",
											"\r",
											"// Set variables with generated values\r",
											"pm.variables.set(\"stateName\", randomstateName);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test script\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains success message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"State updated successfully\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Success is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"// Retrieve the value used in the request\r",
											"let stateName = pm.variables.get(\"stateName\");\r",
											"\r",
											"// Set the value in the environment or collection\r",
											"pm.environment.set(\"stateName\", stateName);\r",
											"\r",
											"// Optionally, log the value to ensure it was set correctly\r",
											"console.log(\"stateName:\", stateName);\r",
											"\r",
											"// Define the expected fields\r",
											"const expectedFields = [\"data\", \"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"stateId\":{{stateId}},    \r\n    \"countryId\": {{countryId}},\r\n    \"stateName\": \"{{stateName}}\"\r\n}\r\n\r\n// {\r\n//     \"stateId\":6,    \r\n//     \"isActive\":1\r\n// }\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}state-update",
									"host": [
										"{{base_url}}state-update"
									]
								}
							},
							"response": []
						},
						{
							"name": "state-update-already-exists",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test script\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains errors\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0]).to.eql(\"State name already exists.\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Success is false\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"\r",
											"// Define the expected fields\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"stateId\":{{stateId}},    \r\n    \"countryId\": {{countryId}},\r\n    \"stateName\": \"{{stateNameFromList}}\"\r\n}\r\n\r\n// {\r\n//     \"stateId\":6,    \r\n//     \"isActive\":1\r\n// }\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}state-update",
									"host": [
										"{{base_url}}state-update"
									]
								}
							},
							"response": []
						},
						{
							"name": "state-data-after-update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 'message' is 'State data fetched successfully'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"State data fetched successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'data' contains 'stateName' with string value\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data[0]).to.have.property(\"stateName\");\r",
											"    pm.expect(jsonData.data[0].stateName).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"let responseBody = pm.response.json();\r",
											"\r",
											"// Extract data from the response\r",
											"let responsestateName = responseBody.data[0].stateName;\r",
											"\r",
											"\r",
											"// Retrieve the stored variables\r",
											"let storedstateName = pm.variables.get(\"stateName\"); // Get from local variable scope\r",
											"\r",
											"\r",
											"// Verify stateName\r",
											"pm.test(\"stateName is correct\", function () {\r",
											"    pm.expect(responsestateName).to.eql(storedstateName);\r",
											"});\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that 'data' is an array and contains at least one item\r",
											"pm.test(\"Verify 'data' is an array and contains at least one item\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"});\r",
											"\r",
											"// Access the first item in the 'data' array\r",
											"const firstDataItem = actualResponse.data[0];\r",
											"\r",
											"// Verify 'country', 'createdBy', 'isActive', 'stateId', 'stateName', and 'updatedBy' in the first data item\r",
											"pm.test(\"Verify 'country', 'createdBy', 'isActive', 'stateId', 'stateName', and 'updatedBy' in the first data item\", function () {\r",
											"    pm.expect(firstDataItem).to.have.property(\"country\").that.is.an(\"object\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"createdBy\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"isActive\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"stateId\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"stateName\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"updatedBy\");\r",
											"});\r",
											"\r",
											"// Access the 'country' object within the first data item\r",
											"const countryObject = firstDataItem.country;\r",
											"\r",
											"// Verify 'countryId', 'countryName', and 'isActive' in the 'country' object\r",
											"pm.test(\"Verify 'countryId', 'countryName', and 'isActive' in the 'country' object\", function () {\r",
											"    pm.expect(countryObject).to.have.property(\"countryId\");\r",
											"    pm.expect(countryObject).to.have.property(\"countryName\");\r",
											"    pm.expect(countryObject).to.have.property(\"isActive\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"stateId\": {{stateId}}\r\n}\r\n\r\n// {\r\n\r\n// }\r\n\r\n// {\r\n//     \"isActive\":1\r\n// }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}state-data",
									"host": [
										"{{base_url}}state-data"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "city",
					"item": [
						{
							"name": "cities-add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random string of given length\r",
											"function generateRandomString(length) {\r",
											"    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"\r",
											"// Generate random values\r",
											"let randomcity = generateRandomString(6);\r",
											"let randomsoil = generateRandomString(6);\r",
											"\r",
											"// Set variables with generated values\r",
											"pm.variables.set(\"city\", randomcity);\r",
											"pm.variables.set(\"soil\", randomsoil);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"cityId\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"cityId\", jsonData.data.cityId);\r",
											"});\r",
											"\r",
											"\r",
											"// Test script\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains success message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"City added successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains cityId\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.have.property(\"cityId\");\r",
											"    pm.expect(jsonData.data.cityId).to.be.a('number');\r",
											"});\r",
											"\r",
											"pm.test(\"Success is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"// Retrieve the values used in the request\r",
											"let city = pm.variables.get(\"city\");\r",
											"let soil = pm.variables.get(\"soil\");\r",
											"\r",
											"// Set the values in the environment or collection\r",
											"pm.environment.set(\"city1\", city);\r",
											"pm.environment.set(\"soil1\", soil);\r",
											"\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'data' contains 'cityId'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.have.property(\"cityId\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"countryId\": {{countryId}},\r\n    \"stateId\": {{stateId}},\r\n    \"city\": \"{{city}}\",\r\n    \"soil\": \"{{soil}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}city-add",
									"host": [
										"{{base_url}}city-add"
									]
								}
							},
							"response": []
						},
						{
							"name": "cities-add-already-exists",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test script\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains errors\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0]).to.eql(\"City already exists.\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Success is false\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"\r",
											"// Define the expected fields\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"countryId\": {{countryId}},\r\n    \"stateId\": {{stateId}},\r\n    \"city\": \"{{city1}}\",\r\n    \"soil\": \"{{soil1}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}city-add",
									"host": [
										"{{base_url}}city-add"
									]
								}
							},
							"response": []
						},
						{
							"name": "cities-list-after-add",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 'message' is 'City data fetched successfully'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"City data fetched successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'data' contains 'cityName' with string value\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data[0]).to.have.property(\"cityName\");\r",
											"    pm.expect(jsonData.data[0].cityName).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"let responseBody = pm.response.json();\r",
											"\r",
											"// Extract data from the response\r",
											"let responsecity = responseBody.data[0].cityName;\r",
											"let responsesoil = responseBody.data[0].soil;\r",
											"\r",
											"// Retrieve the stored variables\r",
											"let storedcity = pm.variables.get(\"city1\"); // Get from local variable scope\r",
											"let storedsoil = pm.variables.get(\"soil1\"); // Get from local variable scope\r",
											"\r",
											"// Verify surveyorRank\r",
											"pm.test(\"city is correct\", function () {\r",
											"    pm.expect(responsecity).to.eql(storedcity);\r",
											"});\r",
											"\r",
											"\r",
											"// Verify surveyorRank\r",
											"pm.test(\"soil is correct\", function () {\r",
											"    pm.expect(responsesoil).to.eql(storedsoil);\r",
											"});\r",
											"\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that 'data' is an array and contains at least one item\r",
											"pm.test(\"Verify 'data' is an array and contains at least one item\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"});\r",
											"\r",
											"// Access the first item in the 'data' array\r",
											"const firstDataItem = actualResponse.data[0];\r",
											"\r",
											"// Verify 'cityId', 'cityName', 'isActive', 'soil', 'createdBy', and 'updatedBy' in the first data item\r",
											"pm.test(\"Verify 'cityId', 'cityName', 'isActive', 'soil', 'createdBy', and 'updatedBy' in the first data item\", function () {\r",
											"    pm.expect(firstDataItem).to.have.property(\"cityId\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"cityName\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"isActive\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"soil\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"createdBy\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"updatedBy\");\r",
											"});\r",
											"\r",
											"// Access the 'country' object within the first data item\r",
											"const countryObject = firstDataItem.country;\r",
											"\r",
											"// Verify 'countryId', 'countryName', and 'isActive' in the 'country' object\r",
											"pm.test(\"Verify 'countryId', 'countryName', and 'isActive' in the 'country' object\", function () {\r",
											"    pm.expect(countryObject).to.have.property(\"countryId\");\r",
											"    pm.expect(countryObject).to.have.property(\"countryName\");\r",
											"    pm.expect(countryObject).to.have.property(\"isActive\");\r",
											"});\r",
											"\r",
											"// Access the 'state' object within the first data item\r",
											"const stateObject = firstDataItem.state;\r",
											"\r",
											"// Verify 'stateId', 'stateName', and 'isActive' in the 'state' object\r",
											"pm.test(\"Verify 'stateId', 'stateName', and 'isActive' in the 'state' object\", function () {\r",
											"    pm.expect(stateObject).to.have.property(\"stateId\");\r",
											"    pm.expect(stateObject).to.have.property(\"stateName\");\r",
											"    pm.expect(stateObject).to.have.property(\"isActive\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cityId\": {{cityId}}\r\n}\r\n\r\n// {\r\n  \r\n// }\r\n\r\n// {\r\n//     \"isActive\":1\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}city-data",
									"host": [
										"{{base_url}}city-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "cities-list-after-add-isActive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Get the current isActive value from the environment\r",
											"let isActive = pm.environment.get(\"isActive\");\r",
											"\r",
											"// Define the expected response \r",
											"function validateDataIsPresent(response) {\r",
											"    pm.test(\"Response should have success set to true\", () => {\r",
											"        pm.expect(response.success).to.be.true;\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should have statusCode 200\", () => {\r",
											"        pm.expect(response.statusCode).to.eql(200);\r",
											"    });\r",
											"\r",
											"     // Check if the data array is not empty\r",
											"    if (response.data.length > 0) {\r",
											"        // Verify that the first element in the data array has the correct isActive value\r",
											"        pm.test(\"First data element should have isActive value matching the request\", () => {\r",
											"            pm.expect(response.data[0]).to.have.property('isActive', isActive);\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"// Define the expected response \r",
											"function validateNoDataIsPresent(response) {\r",
											"    pm.test(\"Response should have success set to true\", () => {\r",
											"        pm.expect(response.success).to.be.true;\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should have statusCode 200\", () => {\r",
											"        pm.expect(response.statusCode).to.eql(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should contain an empty data array\", () => {\r",
											"        pm.expect(response.data).to.be.an('array').that.is.empty;\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"// Parse the response\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Check if the isActive value is 0 or 1\r",
											"if ([0, 1].includes(isActive)) {\r",
											"    pm.test(`isActive is '${isActive}', validate response accordingly`, () => {\r",
											"        if (response.data && response.data.length > 0) {\r",
											"            validateDataIsPresent(response);\r",
											"        } else {\r",
											"            validateNoDataIsPresent(response);\r",
											"        }\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Unexpected isActive value\", () => {\r",
											"        pm.expect.fail(`Received unexpected isActive value: ${isActive}`);\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Get the current isActive value from the environment, or initialize it to 0\r",
											"let isActive = pm.environment.get(\"isActive\") || 0;\r",
											"\r",
											"// Toggle isActive between 0 and 1\r",
											"isActive = (isActive === 1) ? 0 : 1;\r",
											"\r",
											"// Set the updated isActive back to the environment\r",
											"pm.environment.set(\"isActive\", isActive);\r",
											"\r",
											"// Set the isActive in the request body\r",
											"let requestData = {\r",
											"    \"isActive\": isActive\r",
											"};\r",
											"\r",
											"// Update the request body with the new isActive value\r",
											"pm.request.body.raw = JSON.stringify(requestData);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// {\r\n//     \"cityId\": {{cityId}}\r\n// }\r\n\r\n// {\r\n  \r\n// }\r\n\r\n{\r\n    \"isActive\":{{isActive}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}city-data",
									"host": [
										"{{base_url}}city-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "cities-list-after-add-full",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"cityName\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"cityNameFromList\", jsonData.data[0].cityName);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'message' is 'City data fetched successfully'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"City data fetched successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'data' contains 'cityName' with string value\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data[0]).to.have.property(\"cityName\");\r",
											"    pm.expect(jsonData.data[0].cityName).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that 'data' is an array and contains at least one item\r",
											"pm.test(\"Verify 'data' is an array and contains at least one item\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"});\r",
											"\r",
											"// Access the first item in the 'data' array\r",
											"const firstDataItem = actualResponse.data[0];\r",
											"\r",
											"// Verify 'cityId', 'cityName', 'isActive', 'soil', 'createdBy', and 'updatedBy' in the first data item\r",
											"pm.test(\"Verify 'cityId', 'cityName', 'isActive', 'soil', 'createdBy', and 'updatedBy' in the first data item\", function () {\r",
											"    pm.expect(firstDataItem).to.have.property(\"cityId\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"cityName\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"isActive\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"soil\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"createdBy\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"updatedBy\");\r",
											"});\r",
											"\r",
											"// Access the 'country' object within the first data item\r",
											"const countryObject = firstDataItem.country;\r",
											"\r",
											"// Verify 'countryId', 'countryName', and 'isActive' in the 'country' object\r",
											"pm.test(\"Verify 'countryId', 'countryName', and 'isActive' in the 'country' object\", function () {\r",
											"    pm.expect(countryObject).to.have.property(\"countryId\");\r",
											"    pm.expect(countryObject).to.have.property(\"countryName\");\r",
											"    pm.expect(countryObject).to.have.property(\"isActive\");\r",
											"});\r",
											"\r",
											"// Access the 'state' object within the first data item\r",
											"const stateObject = firstDataItem.state;\r",
											"\r",
											"// Verify 'stateId', 'stateName', and 'isActive' in the 'state' object\r",
											"pm.test(\"Verify 'stateId', 'stateName', and 'isActive' in the 'state' object\", function () {\r",
											"    pm.expect(stateObject).to.have.property(\"stateId\");\r",
											"    pm.expect(stateObject).to.have.property(\"stateName\");\r",
											"    pm.expect(stateObject).to.have.property(\"isActive\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// {\r\n//     \"cityId\": {{cityId}}\r\n// }\r\n\r\n{\r\n  \r\n}\r\n\r\n// {\r\n//     \"isActive\":1\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}city-data",
									"host": [
										"{{base_url}}city-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "cities-update",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random string of given length\r",
											"function generateRandomString(length) {\r",
											"    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"\r",
											"// Generate random values\r",
											"let randomcity = generateRandomString(6);\r",
											"let randomsoil = generateRandomString(6);\r",
											"\r",
											"// Set variables with generated values\r",
											"pm.variables.set(\"city\", randomcity);\r",
											"pm.variables.set(\"soil\", randomsoil);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test script\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains success message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"City updated successfully\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Success is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"// Retrieve the value used in the request\r",
											"let city = pm.variables.get(\"city\");\r",
											"let soil = pm.variables.get(\"soil\");\r",
											"\r",
											"// Set the value in the environment or collection\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"soilUpdate\", soil);\r",
											"\r",
											"\r",
											"// Optionally, log the value to ensure it was set correctly\r",
											"console.log(\"city:\", city);\r",
											"console.log(\"soilUpdate:\", soil);\r",
											"\r",
											"// Define the expected fields\r",
											"const expectedFields = [\"data\", \"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cityId\":{{cityId}},    \r\n    \"countryId\": {{countryId}},\r\n    \"stateId\": {{stateId}},\r\n    \"city\": \"{{city}}\",\r\n    \"soil\": \"{{soil}}\"\r\n}\r\n\r\n// {\r\n//     \"cityId\":100008,    \r\n//     \"isActive\": 1\r\n// }\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}city-update",
									"host": [
										"{{base_url}}city-update"
									]
								}
							},
							"response": []
						},
						{
							"name": "cities-update-already-exists",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test script\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains errors\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0]).to.eql(\"The provided city name already exists.\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Success is false\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"\r",
											"// Define the expected fields\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cityId\":{{cityId}},    \r\n    \"countryId\": {{countryId}},\r\n    \"stateId\": {{stateId}},\r\n    \"city\": \"{{cityNameFromList}}\",\r\n    \"soil\": \"{{soil}}\"\r\n}\r\n\r\n// {\r\n//     \"cityId\":100008,    \r\n//     \"isActive\": 1\r\n// }\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}city-update",
									"host": [
										"{{base_url}}city-update"
									]
								}
							},
							"response": []
						},
						{
							"name": "cities-list-after-update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Store cityName and soil in variables\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var cityData = jsonData.data[0];  // Assuming the first object in the array\r",
											"\r",
											"    // Store \"cityName\" in a variable\r",
											"    pm.environment.set(\"cityName\", cityData.cityName); // or pm.collectionVariables.set(\"cityName\", cityData.cityName);\r",
											"\r",
											"    // Store \"soil\" in a variable\r",
											"    pm.environment.set(\"soil\", cityData.soil); // or pm.collectionVariables.set(\"soil\", cityData.soil);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verify 'message' is 'City data fetched successfully'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"City data fetched successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'data' contains 'cityName' with string value\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data[0]).to.have.property(\"cityName\");\r",
											"    pm.expect(jsonData.data[0].cityName).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"let responseBody = pm.response.json();\r",
											"\r",
											"// Extract data from the response\r",
											"let responsecity = responseBody.data[0].cityName;\r",
											"let responsesoil = responseBody.data[0].soil;\r",
											"\r",
											"\r",
											"// Retrieve the stored variables\r",
											"let storedcity = pm.variables.get(\"city\"); // Get from local variable scope\r",
											"let storedsoilUpdate = pm.variables.get(\"soilUpdate\"); // Get from local variable scope\r",
											"\r",
											"// Verify countryName\r",
											"pm.test(\"city is correct\", function () {\r",
											"    pm.expect(responsecity).to.eql(storedcity);\r",
											"});\r",
											"\r",
											"pm.test(\"Soil is correct\", function () {\r",
											"    pm.expect(responsesoil).to.eql(storedsoilUpdate);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that 'data' is an array and contains at least one item\r",
											"pm.test(\"Verify 'data' is an array and contains at least one item\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"});\r",
											"\r",
											"// Access the first item in the 'data' array\r",
											"const firstDataItem = actualResponse.data[0];\r",
											"\r",
											"// Verify 'cityId', 'cityName', 'isActive', 'soil', 'createdBy', and 'updatedBy' in the first data item\r",
											"pm.test(\"Verify 'cityId', 'cityName', 'isActive', 'soil', 'createdBy', and 'updatedBy' in the first data item\", function () {\r",
											"    pm.expect(firstDataItem).to.have.property(\"cityId\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"cityName\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"isActive\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"soil\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"createdBy\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"updatedBy\");\r",
											"});\r",
											"\r",
											"// Access the 'country' object within the first data item\r",
											"const countryObject = firstDataItem.country;\r",
											"\r",
											"// Verify 'countryId', 'countryName', and 'isActive' in the 'country' object\r",
											"pm.test(\"Verify 'countryId', 'countryName', and 'isActive' in the 'country' object\", function () {\r",
											"    pm.expect(countryObject).to.have.property(\"countryId\");\r",
											"    pm.expect(countryObject).to.have.property(\"countryName\");\r",
											"    pm.expect(countryObject).to.have.property(\"isActive\");\r",
											"});\r",
											"\r",
											"// Access the 'state' object within the first data item\r",
											"const stateObject = firstDataItem.state;\r",
											"\r",
											"// Verify 'stateId', 'stateName', and 'isActive' in the 'state' object\r",
											"pm.test(\"Verify 'stateId', 'stateName', and 'isActive' in the 'state' object\", function () {\r",
											"    pm.expect(stateObject).to.have.property(\"stateId\");\r",
											"    pm.expect(stateObject).to.have.property(\"stateName\");\r",
											"    pm.expect(stateObject).to.have.property(\"isActive\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cityId\": {{cityId}}\r\n}\r\n\r\n// {\r\n  \r\n// }\r\n\r\n// {\r\n//     \"isActive\":1\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}city-data",
									"host": [
										"{{base_url}}city-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "city-index",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 'message' is 'City data fetched successfully'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"City data fetched successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'data' contains 'cityName' with string value\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data[0]).to.have.property(\"cityName\");\r",
											"    pm.expect(jsonData.data[0].cityName).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that 'data' is an array and contains at least one item\r",
											"pm.test(\"Verify 'data' is an array and contains at least one item\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"});\r",
											"\r",
											"// Access the first item in the 'data' array\r",
											"const firstDataItem = actualResponse.data[0];\r",
											"\r",
											"// Verify 'cityId', 'cityName', 'isActive', 'soil', 'createdBy', and 'updatedBy' in the first data item\r",
											"pm.test(\"Verify 'cityId', 'cityName', 'isActive', 'soil', 'createdBy', and 'updatedBy' in the first data item\", function () {\r",
											"    pm.expect(firstDataItem).to.have.property(\"cityId\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"cityName\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"isActive\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"soil\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"createdBy\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"updatedBy\");\r",
											"});\r",
											"\r",
											"// Access the 'country' object within the first data item\r",
											"const countryObject = firstDataItem.country;\r",
											"\r",
											"// Verify 'countryId', 'countryName', and 'isActive' in the 'country' object\r",
											"pm.test(\"Verify 'countryId', 'countryName', and 'isActive' in the 'country' object\", function () {\r",
											"    pm.expect(countryObject).to.have.property(\"countryId\");\r",
											"    pm.expect(countryObject).to.have.property(\"countryName\");\r",
											"    pm.expect(countryObject).to.have.property(\"isActive\");\r",
											"});\r",
											"\r",
											"// Access the 'state' object within the first data item\r",
											"const stateObject = firstDataItem.state;\r",
											"\r",
											"// Verify 'stateId', 'stateName', and 'isActive' in the 'state' object\r",
											"pm.test(\"Verify 'stateId', 'stateName', and 'isActive' in the 'state' object\", function () {\r",
											"    pm.expect(stateObject).to.have.property(\"stateId\");\r",
											"    pm.expect(stateObject).to.have.property(\"stateName\");\r",
											"    pm.expect(stateObject).to.have.property(\"isActive\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}city-index",
									"host": [
										"{{base_url}}city-index"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "microzonation",
					"item": [
						{
							"name": "microzonation-add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random string of given length\r",
											"function generateRandomString(length) {\r",
											"    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"\r",
											"// Generate random values\r",
											"let randomlevel = generateRandomString(6);\r",
											"\r",
											"\r",
											"// Set variables with generated values\r",
											"pm.variables.set(\"level\", randomlevel);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"microzonationId\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"microzonationId\", jsonData.data.microzonationId);\r",
											"});\r",
											"\r",
											"\r",
											"// Test script\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains success message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Microzonation added successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Store microzonationIds in a variable\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    \r",
											"    // Assuming you want to store the first value in the microzonationIds array\r",
											"    var microzonationId = jsonData.data.microzonationIds[0];\r",
											"\r",
											"    // Store the microzonationId in an environment variable\r",
											"    pm.environment.set(\"microzonationId\", microzonationId); // or use pm.collectionVariables.set(\"microzonationId\", microzonationId);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Success is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"// Retrieve the value used in the request\r",
											"let level = pm.variables.get(\"level\");\r",
											"\r",
											"// Set the value in the environment or collection\r",
											"pm.environment.set(\"levelAdd\", level);\r",
											"\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'data' contains 'microzonationIds'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.have.property(\"microzonationIds\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"assessmentGuidelineId\": {{assessmentGudlineId}}, \r\n    \"surveyorObjective\": [\r\n        {\r\n            \"surveyorObjectiveId\": {{surveyObjectiveId}}, \r\n            \"level\":\"{{level}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}microzonation-add",
									"host": [
										"{{base_url}}microzonation-add"
									]
								}
							},
							"response": []
						},
						{
							"name": "microzonation-add-already-exists",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test script\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains errors\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0]).to.eql(\"The same combination of Surveyor Objective and assessment guideline already exists.\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Success is false\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"\r",
											"// Define the expected fields\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"assessmentGuidelineId\": {{assessmentGudlineId}}, \r\n    \"surveyorObjective\": [\r\n        {\r\n            \"surveyorObjectiveId\": {{surveyObjectiveId}}, \r\n            \"level\":\"{{levelAdd}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}microzonation-add",
									"host": [
										"{{base_url}}microzonation-add"
									]
								}
							},
							"response": []
						},
						{
							"name": "microzonation-list-after-add",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify message, success, and Microzonation array\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Verify the \"message\"\r",
											"    pm.expect(jsonData.message).to.eql(\"Microzonation data retrieved successfully\");\r",
											"\r",
											"    // Verify the \"success\"\r",
											"    pm.expect(jsonData.success).to.eql(\"true\");\r",
											"\r",
											"    // Verify that \"surveyObjective\" is an array and contains elements\r",
											"    pm.expect(jsonData.data.surveyObjective).to.be.an('array').that.is.not.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(8000);\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"let responseBody = pm.response.json();\r",
											"\r",
											"// Extract data from the response for level1 and level2\r",
											"let responseLevel = responseBody.data.surveyObjective[0].level;\r",
											"\r",
											"\r",
											"// Retrieve the stored variables\r",
											"let storedLevel = pm.variables.get(\"levelAdd\");\r",
											"\r",
											"\r",
											"// Verify level1\r",
											"pm.test(\"Level is correct\", function () {\r",
											"    pm.expect(responseLevel).to.eql(storedLevel);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that 'data' contains 'assessmentGuidelineId', 'isActive', and 'surveyObjective'\r",
											"pm.test(\"Verify 'data' contains 'assessmentGuidelineId', 'isActive', 'surveyObjective'\", function () {\r",
											"    pm.expect(actualResponse.data).to.have.property(\"assessmentGuidelineId\");\r",
											"    pm.expect(actualResponse.data).to.have.property(\"isActive\");\r",
											"    pm.expect(actualResponse.data).to.have.property(\"surveyObjective\");\r",
											"});\r",
											"\r",
											"// Define the expected fields in each object within 'surveyObjective'\r",
											"const surveyObjectiveFields = [\"isActive\", \"level\", \"microzonationId\", \"surveyObjective\"];\r",
											"\r",
											"pm.test(\"Verify that 'surveyObjective' contains the expected fields in each object\", function () {\r",
											"    pm.expect(actualResponse.data.surveyObjective).to.be.an(\"array\").that.is.not.empty;\r",
											"\r",
											"    actualResponse.data.surveyObjective.forEach(object => {\r",
											"        surveyObjectiveFields.forEach(field => {\r",
											"            pm.test(`Field ${field} is present in the surveyObjective object`, function () {\r",
											"                pm.expect(object).to.have.property(field);\r",
											"            });\r",
											"        });\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// {\r\n\r\n// }\r\n\r\n// {\r\n//  \"isActive\": 1\r\n// }\r\n\r\n{\r\n  \"assessmentGuidelineId\":{{assessmentGudlineId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}microzonation-data",
									"host": [
										"{{base_url}}microzonation-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "microzonation-list-after-add-isActive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Get the current isActive value from the environment\r",
											"let isActive = pm.environment.get(\"isActive\");\r",
											"\r",
											"// Define the expected response \r",
											"function validateDataIsPresent(response) {\r",
											"    pm.test(\"Response should have success set to true\", () => {\r",
											"        pm.expect(response.success).to.eql(\"true\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should have statusCode 200\", () => {\r",
											"        pm.expect(response.statusCode).to.eql(200);\r",
											"    });\r",
											"\r",
											"     // Check if the data array is not empty\r",
											"    if (response.data.length > 0) {\r",
											"        // Verify that the first element in the data array has the correct isActive value\r",
											"        pm.test(\"First data element should have isActive value matching the request\", () => {\r",
											"            pm.expect(response.data[0]).to.have.property('isActive', isActive);\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"// Define the expected response \r",
											"function validateNoDataIsPresent(response) {\r",
											"    pm.test(\"Response should have success set to true\", () => {\r",
											"        pm.expect(response.success).to.be.true;\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should have statusCode 200\", () => {\r",
											"        pm.expect(response.statusCode).to.eql(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should contain an empty data array\", () => {\r",
											"        pm.expect(response.data).to.be.an('array').that.is.empty;\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"// Parse the response\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Check if the isActive value is 0 or 1\r",
											"if ([0, 1].includes(isActive)) {\r",
											"    pm.test(`isActive is '${isActive}', validate response accordingly`, () => {\r",
											"        if (response.data && response.data.length > 0) {\r",
											"            validateDataIsPresent(response);\r",
											"        } else {\r",
											"            validateNoDataIsPresent(response);\r",
											"        }\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Unexpected isActive value\", () => {\r",
											"        pm.expect.fail(`Received unexpected isActive value: ${isActive}`);\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Get the current isActive value from the environment, or initialize it to 0\r",
											"let isActive = pm.environment.get(\"isActive\") || 0;\r",
											"\r",
											"// Toggle isActive between 0 and 1\r",
											"isActive = (isActive === 1) ? 0 : 1;\r",
											"\r",
											"// Set the updated isActive back to the environment\r",
											"pm.environment.set(\"isActive\", isActive);\r",
											"\r",
											"// Set the isActive in the request body\r",
											"let requestData = {\r",
											"    \"isActive\": isActive\r",
											"};\r",
											"\r",
											"// Update the request body with the new isActive value\r",
											"pm.request.body.raw = JSON.stringify(requestData);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// {\r\n\r\n// }\r\n\r\n{\r\n \"isActive\": {{isActive}}\r\n}\r\n\r\n// {\r\n//   \"assessmentGuidelineId\":{{assessmentGudlineId}}\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}microzonation-data",
									"host": [
										"{{base_url}}microzonation-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "microzonation-list-after-add-full",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"level\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"levelFromList\", jsonData.data[0].surveyObjective[0].value[0].level);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify message, success\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Verify the \"message\"\r",
											"    pm.expect(jsonData.message).to.eql(\"Microzonation data retrieved successfully\");\r",
											"\r",
											"    // Verify the \"success\"\r",
											"    pm.expect(jsonData.success).to.eql(\"true\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(8000);\r",
											"});\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const mainExpectedFields = [\"assessmentGuidelineCount\", \"data\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"mainExpectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that 'data' array is not empty and contains at least one item\r",
											"pm.test(\"Verify 'data' is an array and contains at least one item\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"});\r",
											"\r",
											"// Access the first item in the 'data' array\r",
											"const firstDataItem = actualResponse.data[0];\r",
											"\r",
											"// Verify 'assessmentGuideline', 'assessmentGuidelineId', 'isActive', and 'surveyObjective' in the first data item\r",
											"pm.test(\"Verify 'assessmentGuideline', 'assessmentGuidelineId', 'isActive', and 'surveyObjective' in the first data item\", function () {\r",
											"    pm.expect(firstDataItem).to.have.property(\"assessmentGuideline\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"assessmentGuidelineId\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"isActive\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"surveyObjective\").that.is.an(\"array\").that.is.not.empty;\r",
											"});\r",
											"\r",
											"// Access the first 'surveyObjective' item\r",
											"const firstSurveyObjectiveItem = firstDataItem.surveyObjective[0];\r",
											"\r",
											"// Verify 'isActive', 'surveyObjective', 'surveyObjectiveId', and 'value' in the first 'surveyObjective' item\r",
											"pm.test(\"Verify 'isActive', 'surveyObjective', 'surveyObjectiveId', and 'value' in the first 'surveyObjective' item\", function () {\r",
											"    pm.expect(firstSurveyObjectiveItem).to.have.property(\"isActive\");\r",
											"    pm.expect(firstSurveyObjectiveItem).to.have.property(\"surveyObjective\");\r",
											"    pm.expect(firstSurveyObjectiveItem).to.have.property(\"surveyObjectiveId\");\r",
											"    pm.expect(firstSurveyObjectiveItem).to.have.property(\"value\").that.is.an(\"array\").that.is.not.empty;\r",
											"});\r",
											"\r",
											"// Access the first 'value' item\r",
											"const firstValueItem = firstSurveyObjectiveItem.value[0];\r",
											"\r",
											"// Verify 'createdBy', 'isActive', 'level', 'microzonationId', and 'updatedBy' in the first 'value' item\r",
											"pm.test(\"Verify 'createdBy', 'isActive', 'level', 'microzonationId', and 'updatedBy' in the first 'value' item\", function () {\r",
											"    pm.expect(firstValueItem).to.have.property(\"createdBy\");\r",
											"    pm.expect(firstValueItem).to.have.property(\"isActive\");\r",
											"    pm.expect(firstValueItem).to.have.property(\"level\");\r",
											"    pm.expect(firstValueItem).to.have.property(\"microzonationId\");\r",
											"    pm.expect(firstValueItem).to.have.property(\"updatedBy\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n}\r\n\r\n// {\r\n//  \"isActive\": 1\r\n// }\r\n\r\n// {\r\n//   \"assessmentGuidelineId\":{{assessmentGudlineId}}\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}microzonation-data",
									"host": [
										"{{base_url}}microzonation-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "microzonation-update",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random string of given length\r",
											"function generateRandomString(length) {\r",
											"    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"\r",
											"// Generate random values\r",
											"let randomlevel1 = generateRandomString(6);\r",
											"let randomlevel2 = generateRandomString(6);\r",
											"\r",
											"\r",
											"// Set variables with generated values\r",
											"pm.variables.set(\"level1\", randomlevel1);\r",
											"pm.variables.set(\"level2\", randomlevel2);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test script\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains success message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Microzonation data updated successfully.\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Success is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"// Retrieve the value used in the request\r",
											"let level1 = pm.variables.get(\"level1\");\r",
											"\r",
											"// Set the value in the environment or collection\r",
											"pm.environment.set(\"level1\", level1);\r",
											"\r",
											"// Optionally, log the value to ensure it was set correctly\r",
											"console.log(\"Level 1:\", level1);\r",
											"\r",
											"// Retrieve the value used in the request\r",
											"let level2 = pm.variables.get(\"level2\");\r",
											"\r",
											"// Set the value in the environment or collection\r",
											"pm.environment.set(\"level2\", level2);\r",
											"\r",
											"// Optionally, log the value to ensure it was set correctly\r",
											"console.log(\"Level 2:\", level2);\r",
											"\r",
											"// Define the expected fields\r",
											"const expectedFields = [\"data\", \"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"assessmentGuidelineId\": {{assessmentGudlineId}},\r\n    \"surveyorObjective\":\r\n                            [\r\n                                    {\r\n                                        \"level\": \"{{level1}}\",// without microzonationId it will add new microzonation\r\n                                        \"surveyObjectiveId\": {{surveyObjectiveId}}\r\n                                    },\r\n                                    {\r\n                                        \"level\": \"{{level2}}\",\r\n                                        \"microzonationId\": {{microzonationId}},\r\n                                        \"surveyObjectiveId\": {{surveyObjectiveId}}\r\n                                    }\r\n                            ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}microzonation-update",
									"host": [
										"{{base_url}}microzonation-update"
									]
								}
							},
							"response": []
						},
						{
							"name": "microzonation-list-after-update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify message, success, and surveyObjective array\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Verify the \"message\"\r",
											"    pm.expect(jsonData.message).to.eql(\"Microzonation data retrieved successfully\");\r",
											"\r",
											"    // Verify the \"success\"\r",
											"    pm.expect(jsonData.success).to.eql(\"true\");\r",
											"\r",
											"    // Verify that \"surveyObjective\" is an array and contains elements\r",
											"    pm.expect(jsonData.data.surveyObjective).to.be.an('array').that.is.not.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(8000);\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"let responseBody = pm.response.json();\r",
											"\r",
											"// Extract data from the response for level1 and level2\r",
											"let responseLevel1 = responseBody.data.surveyObjective[0].level;\r",
											"let responseLevel2 = responseBody.data.surveyObjective[1].level;\r",
											"\r",
											"// Retrieve the stored variables\r",
											"let storedLevel1 = pm.variables.get(\"level1\");\r",
											"let storedLevel2 = pm.variables.get(\"level2\");\r",
											"\r",
											"// Verify level1\r",
											"pm.test(\"Level 1 is correct\", function () {\r",
											"    pm.expect(responseLevel1).to.eql(storedLevel1);\r",
											"});\r",
											"\r",
											"// Verify level2\r",
											"pm.test(\"Level 2 is correct\", function () {\r",
											"    pm.expect(responseLevel2).to.eql(storedLevel2);\r",
											"});\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that 'data' contains 'assessmentGuidelineId', 'isActive', and 'surveyObjective'\r",
											"pm.test(\"Verify 'data' contains 'assessmentGuidelineId', 'isActive', 'surveyObjective'\", function () {\r",
											"    pm.expect(actualResponse.data).to.have.property(\"assessmentGuidelineId\");\r",
											"    pm.expect(actualResponse.data).to.have.property(\"isActive\");\r",
											"    pm.expect(actualResponse.data).to.have.property(\"surveyObjective\");\r",
											"});\r",
											"\r",
											"// Define the expected fields in each object within 'surveyObjective'\r",
											"const surveyObjectiveFields = [\"isActive\", \"level\", \"microzonationId\", \"surveyObjective\"];\r",
											"\r",
											"pm.test(\"Verify that 'surveyObjective' contains the expected fields in each object\", function () {\r",
											"    pm.expect(actualResponse.data.surveyObjective).to.be.an(\"array\").that.is.not.empty;\r",
											"\r",
											"    actualResponse.data.surveyObjective.forEach(object => {\r",
											"        surveyObjectiveFields.forEach(field => {\r",
											"            pm.test(`Field ${field} is present in the surveyObjective object`, function () {\r",
											"                pm.expect(object).to.have.property(field);\r",
											"            });\r",
											"        });\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assessmentGuidelineId\":{{assessmentGudlineId}}\r\n}\r\n\r\n// {\r\n\r\n// }\r\n\r\n// {\r\n//  \"isActive\": 1\r\n// }\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}microzonation-data",
									"host": [
										"{{base_url}}microzonation-data"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "scale-mapping",
					"item": [
						{
							"name": "scale-mapping-add",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"scaleMappingId\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"scaleMappingId\", jsonData.data.scaleMappingId);\r",
											"});\r",
											"\r",
											"\r",
											"// Test script\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains success message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Scale mapping added successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains scaleMappingId\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.have.property(\"scaleMappingId\");\r",
											"    pm.expect(jsonData.data.scaleMappingId).to.be.a('number');\r",
											"});\r",
											"\r",
											"pm.test(\"Success is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'data' contains 'scaleMappingId'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.have.property(\"scaleMappingId\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"countryId\": {{countryId}},\r\n    \"stateId\": {{stateId}},\r\n    \"cityId\": {{cityId}},\r\n    \"surveyorObjectiveId\": {{surveyObjectiveId}},\r\n    \"assessmentGuidelineId\": {{assessmentGudlineId}},\r\n    \"microzonationId\": {{microzonationId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}scale-mapping-add",
									"host": [
										"{{base_url}}scale-mapping-add"
									]
								}
							},
							"response": []
						},
						{
							"name": "scale-mapping-add-already-exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test script\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains errors\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0]).to.eql(\"This scale mapping already exists.\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Success is false\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"\r",
											"// Define the expected fields\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"countryId\": {{countryId}},\r\n    \"stateId\": {{stateId}},\r\n    \"cityId\": {{cityId}},\r\n    \"surveyorObjectiveId\": {{surveyObjectiveId}},\r\n    \"assessmentGuidelineId\": {{assessmentGudlineId}},\r\n    \"microzonationId\": {{microzonationId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}scale-mapping-add",
									"host": [
										"{{base_url}}scale-mapping-add"
									]
								}
							},
							"response": []
						},
						{
							"name": "scale-mapping-list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify message, success, and data array\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Verify the \"message\"\r",
											"    pm.expect(jsonData.message).to.eql(\"Scale Mapping data retrieved successfully\");\r",
											"\r",
											"    // Verify the \"success\"\r",
											"    pm.expect(jsonData.success).to.eql(true);\r",
											"\r",
											"    // Verify that \"data\" is an array and contains elements\r",
											"    pm.expect(jsonData.data).to.be.an('array').that.is.not.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time\", function() {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(8000);\r",
											"});\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that 'data' is an array and contains at least one item\r",
											"pm.test(\"Verify 'data' is an array and contains at least one item\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"});\r",
											"\r",
											"// Access the first item in the 'data' array\r",
											"const firstDataItem = actualResponse.data[0];\r",
											"\r",
											"// Verify 'assessmentGuideline' object fields\r",
											"pm.test(\"Verify 'assessmentGuideline' object fields\", function () {\r",
											"    const assessmentGuideline = firstDataItem.assessmentGuideline;\r",
											"    pm.expect(assessmentGuideline).to.have.property(\"assessmentGuideline\");\r",
											"    pm.expect(assessmentGuideline).to.have.property(\"assessmentGuidelineId\");\r",
											"    pm.expect(assessmentGuideline).to.have.property(\"isActive\");\r",
											"});\r",
											"\r",
											"// Verify 'city' object fields\r",
											"pm.test(\"Verify 'city' object fields\", function () {\r",
											"    const city = firstDataItem.city;\r",
											"    pm.expect(city).to.have.property(\"cityId\");\r",
											"    pm.expect(city).to.have.property(\"cityName\");\r",
											"    pm.expect(city).to.have.property(\"isActive\");\r",
											"    pm.expect(city).to.have.property(\"soil\");\r",
											"});\r",
											"\r",
											"// Verify 'country' object fields\r",
											"pm.test(\"Verify 'country' object fields\", function () {\r",
											"    const country = firstDataItem.country;\r",
											"    pm.expect(country).to.have.property(\"countryId\");\r",
											"    pm.expect(country).to.have.property(\"countryName\");\r",
											"    pm.expect(country).to.have.property(\"isActive\");\r",
											"});\r",
											"\r",
											"// Verify 'createdBy' and 'isActive' fields\r",
											"pm.test(\"Verify 'createdBy' and 'isActive' fields\", function () {\r",
											"    pm.expect(firstDataItem).to.have.property(\"createdBy\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"isActive\");\r",
											"});\r",
											"\r",
											"// Verify 'microzonation' object fields\r",
											"pm.test(\"Verify 'microzonation' object fields\", function () {\r",
											"    const microzonation = firstDataItem.microzonation;\r",
											"    pm.expect(microzonation).to.have.property(\"isActive\");\r",
											"    pm.expect(microzonation).to.have.property(\"level\");\r",
											"    pm.expect(microzonation).to.have.property(\"microzonationId\");\r",
											"});\r",
											"\r",
											"// Verify 'scaleMappingId' field\r",
											"pm.test(\"Verify 'scaleMappingId' field\", function () {\r",
											"    pm.expect(firstDataItem).to.have.property(\"scaleMappingId\");\r",
											"});\r",
											"\r",
											"// Verify 'state' object fields\r",
											"pm.test(\"Verify 'state' object fields\", function () {\r",
											"    const state = firstDataItem.state;\r",
											"    pm.expect(state).to.have.property(\"isActive\");\r",
											"    pm.expect(state).to.have.property(\"stateId\");\r",
											"    pm.expect(state).to.have.property(\"stateName\");\r",
											"});\r",
											"\r",
											"// Verify 'surveyObjective' object fields\r",
											"pm.test(\"Verify 'surveyObjective' object fields\", function () {\r",
											"    const surveyObjective = firstDataItem.surveyObjective;\r",
											"    pm.expect(surveyObjective).to.have.property(\"isActive\");\r",
											"    pm.expect(surveyObjective).to.have.property(\"surveyObjective\");\r",
											"    pm.expect(surveyObjective).to.have.property(\"surveyObjectiveId\");\r",
											"});\r",
											"\r",
											"// Verify 'updatedBy' field\r",
											"pm.test(\"Verify 'updatedBy' field\", function () {\r",
											"    pm.expect(firstDataItem).to.have.property(\"updatedBy\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"scaleMappingId\": {{scaleMappingId}}\r\n}\r\n\r\n// {\r\n\r\n// }\r\n\r\n// {\r\n//     \"isActive\":3\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}scale-mapping-data",
									"host": [
										"{{base_url}}scale-mapping-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "scale-mapping-list-isActive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Get the current isActive value from the environment\r",
											"let isActive = pm.environment.get(\"isActive\");\r",
											"\r",
											"// Define the expected response \r",
											"function validateDataIsPresent(response) {\r",
											"    pm.test(\"Response should have success set to true\", () => {\r",
											"        pm.expect(response.success).to.be.true;\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should have statusCode 200\", () => {\r",
											"        pm.expect(response.statusCode).to.eql(200);\r",
											"    });\r",
											"\r",
											"     // Check if the data array is not empty\r",
											"    if (response.data.length > 0) {\r",
											"        // Verify that the first element in the data array has the correct isActive value\r",
											"        pm.test(\"First data element should have isActive value matching the request\", () => {\r",
											"            pm.expect(response.data[0]).to.have.property('isActive', isActive);\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"// Define the expected response \r",
											"function validateNoDataIsPresent(response) {\r",
											"    pm.test(\"Response should have success set to true\", () => {\r",
											"        pm.expect(response.success).to.be.true;\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should have statusCode 200\", () => {\r",
											"        pm.expect(response.statusCode).to.eql(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should contain an empty data array\", () => {\r",
											"        pm.expect(response.data).to.be.an('array').that.is.empty;\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"// Parse the response\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Check if the isActive value is 0 or 1\r",
											"if ([0, 1].includes(isActive)) {\r",
											"    pm.test(`isActive is '${isActive}', validate response accordingly`, () => {\r",
											"        if (response.data && response.data.length > 0) {\r",
											"            validateDataIsPresent(response);\r",
											"        } else {\r",
											"            validateNoDataIsPresent(response);\r",
											"        }\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Unexpected isActive value\", () => {\r",
											"        pm.expect.fail(`Received unexpected isActive value: ${isActive}`);\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Get the current isActive value from the environment, or initialize it to 0\r",
											"let isActive = pm.environment.get(\"isActive\") || 0;\r",
											"\r",
											"// Toggle isActive between 0 and 1\r",
											"isActive = (isActive === 1) ? 0 : 1;\r",
											"\r",
											"// Set the updated isActive back to the environment\r",
											"pm.environment.set(\"isActive\", isActive);\r",
											"\r",
											"// Set the isActive in the request body\r",
											"let requestData = {\r",
											"    \"isActive\": isActive\r",
											"};\r",
											"\r",
											"// Update the request body with the new isActive value\r",
											"pm.request.body.raw = JSON.stringify(requestData);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// {\r\n//     \"scaleMappingId\": {{scaleMappingId}}\r\n// }\r\n\r\n// {\r\n\r\n// }\r\n\r\n{\r\n    \"isActive\":{{isActive}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}scale-mapping-data",
									"host": [
										"{{base_url}}scale-mapping-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "scale-mapping-list-full",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify message, success, and data array\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Verify the \"message\"\r",
											"    pm.expect(jsonData.message).to.eql(\"Scale Mapping data retrieved successfully\");\r",
											"\r",
											"    // Verify the \"success\"\r",
											"    pm.expect(jsonData.success).to.eql(true);\r",
											"\r",
											"    // Verify that \"data\" is an array and contains elements\r",
											"    pm.expect(jsonData.data).to.be.an('array').that.is.not.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time\", function() {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(8000);\r",
											"});\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that 'data' is an array and contains at least one item\r",
											"pm.test(\"Verify 'data' is an array and contains at least one item\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"});\r",
											"\r",
											"// Access the first item in the 'data' array\r",
											"const firstDataItem = actualResponse.data[0];\r",
											"\r",
											"// Verify 'assessmentGuideline' object fields\r",
											"pm.test(\"Verify 'assessmentGuideline' object fields\", function () {\r",
											"    const assessmentGuideline = firstDataItem.assessmentGuideline;\r",
											"    pm.expect(assessmentGuideline).to.have.property(\"assessmentGuideline\");\r",
											"    pm.expect(assessmentGuideline).to.have.property(\"assessmentGuidelineId\");\r",
											"    pm.expect(assessmentGuideline).to.have.property(\"isActive\");\r",
											"});\r",
											"\r",
											"// Verify 'city' object fields\r",
											"pm.test(\"Verify 'city' object fields\", function () {\r",
											"    const city = firstDataItem.city;\r",
											"    pm.expect(city).to.have.property(\"cityId\");\r",
											"    pm.expect(city).to.have.property(\"cityName\");\r",
											"    pm.expect(city).to.have.property(\"isActive\");\r",
											"    pm.expect(city).to.have.property(\"soil\");\r",
											"});\r",
											"\r",
											"// Verify 'country' object fields\r",
											"pm.test(\"Verify 'country' object fields\", function () {\r",
											"    const country = firstDataItem.country;\r",
											"    pm.expect(country).to.have.property(\"countryId\");\r",
											"    pm.expect(country).to.have.property(\"countryName\");\r",
											"    pm.expect(country).to.have.property(\"isActive\");\r",
											"});\r",
											"\r",
											"// Verify 'createdBy' and 'isActive' fields\r",
											"pm.test(\"Verify 'createdBy' and 'isActive' fields\", function () {\r",
											"    pm.expect(firstDataItem).to.have.property(\"createdBy\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"isActive\");\r",
											"});\r",
											"\r",
											"// Verify 'microzonation' object fields\r",
											"pm.test(\"Verify 'microzonation' object fields\", function () {\r",
											"    const microzonation = firstDataItem.microzonation;\r",
											"    pm.expect(microzonation).to.have.property(\"isActive\");\r",
											"    pm.expect(microzonation).to.have.property(\"level\");\r",
											"    pm.expect(microzonation).to.have.property(\"microzonationId\");\r",
											"});\r",
											"\r",
											"// Verify 'scaleMappingId' field\r",
											"pm.test(\"Verify 'scaleMappingId' field\", function () {\r",
											"    pm.expect(firstDataItem).to.have.property(\"scaleMappingId\");\r",
											"});\r",
											"\r",
											"// Verify 'state' object fields\r",
											"pm.test(\"Verify 'state' object fields\", function () {\r",
											"    const state = firstDataItem.state;\r",
											"    pm.expect(state).to.have.property(\"isActive\");\r",
											"    pm.expect(state).to.have.property(\"stateId\");\r",
											"    pm.expect(state).to.have.property(\"stateName\");\r",
											"});\r",
											"\r",
											"// Verify 'surveyObjective' object fields\r",
											"pm.test(\"Verify 'surveyObjective' object fields\", function () {\r",
											"    const surveyObjective = firstDataItem.surveyObjective;\r",
											"    pm.expect(surveyObjective).to.have.property(\"isActive\");\r",
											"    pm.expect(surveyObjective).to.have.property(\"surveyObjective\");\r",
											"    pm.expect(surveyObjective).to.have.property(\"surveyObjectiveId\");\r",
											"});\r",
											"\r",
											"// Verify 'updatedBy' field\r",
											"pm.test(\"Verify 'updatedBy' field\", function () {\r",
											"    pm.expect(firstDataItem).to.have.property(\"updatedBy\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// {\r\n//     \"scaleMappingId\": {{scaleMappingId}}\r\n// }\r\n\r\n{\r\n\r\n}\r\n\r\n// {\r\n//     \"isActive\":3\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}scale-mapping-data",
									"host": [
										"{{base_url}}scale-mapping-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "scale-mapping-update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test script\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response body contains success message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Scale mapping updated successfully\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Success is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"\r",
											"// Define the expected fields\r",
											"const expectedFields = [\"data\", \"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"scaleMappingId\":{{scaleMappingId}},\r\n    \"countryId\": 1559032693, \r\n    \"stateId\": {{stateUpdate}},\r\n    \"cityId\": {{cityUpdate}},\r\n    \"surveyorObjectiveId\": {{surveyObjectiveId}}, \r\n    \"assessmentGuidelineId\": {{assessmentGudlineId}},\r\n    \"microzonationId\": {{microzonationId}} \r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}scale-mapping-update",
									"host": [
										"{{base_url}}scale-mapping-update"
									]
								}
							},
							"response": []
						},
						{
							"name": "scale-mapping-update-already-exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test script\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0]).to.eql(\"Combination already exists. Cannot update.\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Success is false\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"\r",
											"// Define the expected fields\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"scaleMappingId\":{{scaleMappingId}},\r\n    \"countryId\": 1559032693, \r\n    \"stateId\": {{stateUpdate}},\r\n    \"cityId\": {{cityUpdate}},\r\n    \"surveyorObjectiveId\": {{surveyObjectiveId}}, \r\n    \"assessmentGuidelineId\": {{assessmentGudlineId}},\r\n    \"microzonationId\": {{microzonationId}} \r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}scale-mapping-update",
									"host": [
										"{{base_url}}scale-mapping-update"
									]
								}
							},
							"response": []
						},
						{
							"name": "scale-mapping-list-after-update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify message, success, and data array\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Verify the \"message\"\r",
											"    pm.expect(jsonData.message).to.eql(\"Scale Mapping data retrieved successfully\");\r",
											"\r",
											"    // Verify the \"success\"\r",
											"    pm.expect(jsonData.success).to.eql(true);\r",
											"\r",
											"    // Verify that \"data\" is an array and contains elements\r",
											"    pm.expect(jsonData.data).to.be.an('array').that.is.not.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time\", function() {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(8000);\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"let responseBody = pm.response.json();\r",
											"\r",
											"// Extract data from the response\r",
											"let responseCityId = responseBody.data[0].city.cityId;\r",
											"let responseStateId = responseBody.data[0].state.stateId;\r",
											"\r",
											"// Retrieve the stored variables and convert them to integers\r",
											"let cityUpdate = parseInt(pm.variables.get(\"cityUpdate\"));\r",
											"let stateUpdate = parseInt(pm.variables.get(\"stateUpdate\"));\r",
											"\r",
											"// Verify cityId\r",
											"pm.test(\"City ID is correct\", function () {\r",
											"    pm.expect(responseCityId).to.eql(cityUpdate);\r",
											"});\r",
											"\r",
											"// Verify stateId\r",
											"pm.test(\"State ID is correct\", function () {\r",
											"    pm.expect(responseStateId).to.eql(stateUpdate);\r",
											"});\r",
											"\r",
											"// Optionally, log the values to ensure they were retrieved correctly\r",
											"console.log(\"responseCityId:\", responseCityId);\r",
											"console.log(\"responseStateId:\", responseStateId);\r",
											"console.log(\"cityUpdate:\", cityUpdate);\r",
											"console.log(\"stateUpdate:\", stateUpdate);\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that 'data' is an array and contains at least one item\r",
											"pm.test(\"Verify 'data' is an array and contains at least one item\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"});\r",
											"\r",
											"// Access the first item in the 'data' array\r",
											"const firstDataItem = actualResponse.data[0];\r",
											"\r",
											"// Verify 'assessmentGuideline' object fields\r",
											"pm.test(\"Verify 'assessmentGuideline' object fields\", function () {\r",
											"    const assessmentGuideline = firstDataItem.assessmentGuideline;\r",
											"    pm.expect(assessmentGuideline).to.have.property(\"assessmentGuideline\");\r",
											"    pm.expect(assessmentGuideline).to.have.property(\"assessmentGuidelineId\");\r",
											"    pm.expect(assessmentGuideline).to.have.property(\"isActive\");\r",
											"});\r",
											"\r",
											"// Verify 'city' object fields\r",
											"pm.test(\"Verify 'city' object fields\", function () {\r",
											"    const city = firstDataItem.city;\r",
											"    pm.expect(city).to.have.property(\"cityId\");\r",
											"    pm.expect(city).to.have.property(\"cityName\");\r",
											"    pm.expect(city).to.have.property(\"isActive\");\r",
											"    pm.expect(city).to.have.property(\"soil\");\r",
											"});\r",
											"\r",
											"// Verify 'country' object fields\r",
											"pm.test(\"Verify 'country' object fields\", function () {\r",
											"    const country = firstDataItem.country;\r",
											"    pm.expect(country).to.have.property(\"countryId\");\r",
											"    pm.expect(country).to.have.property(\"countryName\");\r",
											"    pm.expect(country).to.have.property(\"isActive\");\r",
											"});\r",
											"\r",
											"// Verify 'createdBy' and 'isActive' fields\r",
											"pm.test(\"Verify 'createdBy' and 'isActive' fields\", function () {\r",
											"    pm.expect(firstDataItem).to.have.property(\"createdBy\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"isActive\");\r",
											"});\r",
											"\r",
											"// Verify 'microzonation' object fields\r",
											"pm.test(\"Verify 'microzonation' object fields\", function () {\r",
											"    const microzonation = firstDataItem.microzonation;\r",
											"    pm.expect(microzonation).to.have.property(\"isActive\");\r",
											"    pm.expect(microzonation).to.have.property(\"level\");\r",
											"    pm.expect(microzonation).to.have.property(\"microzonationId\");\r",
											"});\r",
											"\r",
											"// Verify 'scaleMappingId' field\r",
											"pm.test(\"Verify 'scaleMappingId' field\", function () {\r",
											"    pm.expect(firstDataItem).to.have.property(\"scaleMappingId\");\r",
											"});\r",
											"\r",
											"// Verify 'state' object fields\r",
											"pm.test(\"Verify 'state' object fields\", function () {\r",
											"    const state = firstDataItem.state;\r",
											"    pm.expect(state).to.have.property(\"isActive\");\r",
											"    pm.expect(state).to.have.property(\"stateId\");\r",
											"    pm.expect(state).to.have.property(\"stateName\");\r",
											"});\r",
											"\r",
											"// Verify 'surveyObjective' object fields\r",
											"pm.test(\"Verify 'surveyObjective' object fields\", function () {\r",
											"    const surveyObjective = firstDataItem.surveyObjective;\r",
											"    pm.expect(surveyObjective).to.have.property(\"isActive\");\r",
											"    pm.expect(surveyObjective).to.have.property(\"surveyObjective\");\r",
											"    pm.expect(surveyObjective).to.have.property(\"surveyObjectiveId\");\r",
											"});\r",
											"\r",
											"// Verify 'updatedBy' field\r",
											"pm.test(\"Verify 'updatedBy' field\", function () {\r",
											"    pm.expect(firstDataItem).to.have.property(\"updatedBy\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"scaleMappingId\": {{scaleMappingId}}\r\n}\r\n\r\n// {\r\n\r\n// }\r\n\r\n// {\r\n//     \"isActive\":3\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}scale-mapping-data",
									"host": [
										"{{base_url}}scale-mapping-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "microzonation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify microzonation response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // 1. Verify \"is_successful\": \"1\"\r",
											"    pm.expect(jsonData.is_successful).to.eql(\"1\");\r",
											"\r",
											"    // 2. Verify \"success_message\": \"Microzonation data retrieved successfully\"\r",
											"    pm.expect(jsonData.success_message).to.eql(\"Microzonation data retrieved successfully\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response keys for Microzonation\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"data\");\r",
											"    pm.expect(jsonData.data[0]).to.have.property(\"microzonation\");\r",
											"    pm.expect(jsonData.data[0]).to.have.property(\"soil\");\r",
											"    pm.expect(jsonData).to.have.property(\"error_code\");\r",
											"    pm.expect(jsonData).to.have.property(\"errors\");\r",
											"    pm.expect(jsonData).to.have.property(\"is_successful\");\r",
											"    pm.expect(jsonData).to.have.property(\"success_message\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"city_id\":\"{{cityUpdate}}\",\r\n    \"disaster_id\":\"{{surveyObjectiveId}}\",\r\n    \"assessment_method_id\":\"{{assessmentGudlineId}}\",\r\n    \"state_id\":\"{{stateUpdate}}\",\r\n    \"country\":1559032693,\r\n    \"auth_key\":\"ltnfvh18zxItOhP2qzrtynnVvbyniu\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url_front}}microzonation",
									"host": [
										"{{base_url_front}}microzonation"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "media",
					"item": [
						{
							"name": "image-Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify image upload response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Verify the \"message\"\r",
											"    pm.expect(jsonData.message).to.eql(\"Media files uploaded successfully\");\r",
											"\r",
											"    // Verify the \"success\"\r",
											"    pm.expect(jsonData.success).to.eql(true);\r",
											"\r",
											"    // Verify that \"data\" contains the \"image\" key and its value is a non-empty string\r",
											"    pm.expect(jsonData.data).to.have.property('image').that.is.a('string').and.is.not.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time\", function() {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(8000);\r",
											"});\r",
											"\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'data' contains 'image'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.have.property(\"image\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Get the current date\r",
											"let date = new Date();\r",
											"let day = date.getDate();\r",
											"let month = date.getMonth() + 1; // Months are zero-indexed\r",
											"let year = date.getFullYear();\r",
											"\r",
											"// Generate the file path dynamically based on date\r",
											"let newImagePath = `\"F:/Download/Testing images, video, audio/big.jpg\"/image_${year}_${month}_${day}.jpg`;\r",
											"\r",
											"// Update the environment variable\r",
											"pm.environment.set(\"currentImagePath\", newImagePath)\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "userId",
											"value": "53",
											"type": "text",
											"disabled": true
										},
										{
											"key": "structureTypeId",
											"value": "1558951673",
											"type": "text",
											"disabled": true
										},
										{
											"key": "structureHelpDetailsId",
											"value": "1558951673",
											"type": "text",
											"disabled": true
										},
										{
											"key": "imageProcessingId",
											"value": "100000",
											"type": "text",
											"disabled": true
										},
										{
											"key": "referenceImagesId",
											"value": "100001",
											"type": "text",
											"disabled": true
										},
										{
											"key": "image",
											"type": "file",
											"src": "postman-cloud:///1ef614c4-301b-4990-845f-05f04161c61c"
										},
										{
											"key": "video",
											"type": "file",
											"src": [],
											"disabled": true
										},
										{
											"key": "audio",
											"type": "file",
											"src": [],
											"disabled": true
										},
										{
											"key": "description",
											"value": "Great",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{base_url}}media",
									"host": [
										"{{base_url}}media"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "video-Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify image upload response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Verify the \"message\"\r",
											"    pm.expect(jsonData.message).to.eql(\"Media files uploaded successfully\");\r",
											"\r",
											"    // Verify the \"success\"\r",
											"    pm.expect(jsonData.success).to.eql(true);\r",
											"\r",
											"    // Verify that \"data\" contains the \"image\" key and its value is a non-empty string\r",
											"    pm.expect(jsonData.data).to.have.property('video').that.is.a('string').and.is.not.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time\", function() {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(8000);\r",
											"});\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'data' contains 'video'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.have.property(\"video\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Get the current date\r",
											"let date = new Date();\r",
											"let day = date.getDate();\r",
											"let month = date.getMonth() + 1; // Months are zero-indexed\r",
											"let year = date.getFullYear();\r",
											"\r",
											"// Generate the file path dynamically based on date\r",
											"let newVideoPath = `\"F:/Download/Testing images, video, audio/856787-hd_1920_1080_30fps.mp4\"/Video_${year}_${month}_${day}.mp4`;\r",
											"\r",
											"// Update the environment variable\r",
											"pm.environment.set(\"currentVideoPath\", newVideoPath);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "userId",
											"value": "{{newAdmin_id}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "structureTypeId",
											"value": "1558951673",
											"type": "text",
											"disabled": true
										},
										{
											"key": "structureHelpDetailsId",
											"value": "1558951673",
											"type": "text",
											"disabled": true
										},
										{
											"key": "imageProcessingId",
											"value": "100000",
											"type": "text",
											"disabled": true
										},
										{
											"key": "referenceImagesId",
											"value": "100001",
											"type": "text",
											"disabled": true
										},
										{
											"key": "image",
											"type": "file",
											"src": [],
											"disabled": true
										},
										{
											"key": "video",
											"type": "file",
											"src": "postman-cloud:///1ef6525e-4760-45b0-8295-85a30ee9f2c6"
										},
										{
											"key": "audio",
											"type": "file",
											"src": [],
											"disabled": true
										},
										{
											"key": "description",
											"value": "Great",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{base_url}}media",
									"host": [
										"{{base_url}}media"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "audio-Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify audio upload response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Verify the \"message\"\r",
											"    pm.expect(jsonData.message).to.eql(\"Media files uploaded successfully\");\r",
											"\r",
											"    // Verify the \"success\"\r",
											"    pm.expect(jsonData.success).to.eql(true);\r",
											"\r",
											"    // Verify that \"data\" contains the \"audio\" key and its value is a non-empty string\r",
											"    pm.expect(jsonData.data).to.have.property('audio').that.is.a('string').and.is.not.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time\", function() {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(8000);\r",
											"});\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'data' contains 'audio'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.have.property(\"audio\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Get the current date\r",
											"let date = new Date();\r",
											"let day = date.getDate();\r",
											"let month = date.getMonth() + 1; // Months are zero-indexed\r",
											"let year = date.getFullYear();\r",
											"\r",
											"// Generate the file path dynamically based on date\r",
											"let newAudioPath = `\"F:/Download/Testing images, video, audio/file_example_MP3_2MG.mp3\"/Audio_${year}_${month}_${day}.mp3`;\r",
											"\r",
											"// Update the environment variable\r",
											"pm.environment.set(\"currentAudioPath\", newAudioPath);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "userId",
											"value": "53",
											"type": "text",
											"disabled": true
										},
										{
											"key": "structureTypeId",
											"value": "1558951673",
											"type": "text",
											"disabled": true
										},
										{
											"key": "structureHelpDetailsId",
											"value": "1558951673",
											"type": "text",
											"disabled": true
										},
										{
											"key": "imageProcessingId",
											"value": "100000",
											"type": "text",
											"disabled": true
										},
										{
											"key": "referenceImagesId",
											"value": "100001",
											"type": "text",
											"disabled": true
										},
										{
											"key": "image",
											"type": "file",
											"src": [],
											"disabled": true
										},
										{
											"key": "video",
											"type": "file",
											"src": [],
											"disabled": true
										},
										{
											"key": "audio",
											"type": "file",
											"src": "postman-cloud:///1ef652a1-674c-4d40-a4f7-e39215d1e194"
										},
										{
											"key": "description",
											"value": "Great",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{base_url}}media",
									"host": [
										"{{base_url}}media"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "image processing",
					"item": [
						{
							"name": "image processing add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random string of given length\r",
											"function generateRandomString(length) {\r",
											"    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Function to generate a random numerical value within a range\r",
											"function generateRandomNumber(min, max) {\r",
											"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
											"}\r",
											"\r",
											"// Generate random values\r",
											"let randomItemCode = generateRandomNumber(10000, 99999).toString();\r",
											"let randomItemSearchCode = generateRandomNumber(1000, 9999).toString();\r",
											"let randomDistressPattern = \"pattern_\" + generateRandomString(10);\r",
											"let randomVulnerabilityScale = \"high\" + generateRandomNumber(1, 5);\r",
											"let randomScoreReference = \"ref_\" + generateRandomNumber(1000, 9999).toString();\r",
											"let randomNumericalScore = generateRandomNumber(800, 900);\r",
											"let randomCameraType = \"DSLR\" + generateRandomNumber(1, 5);\r",
											"let randomLightAndWeatherCondition = \"sunny\" + generateRandomNumber(1, 5);\r",
											"let randomCapturingDistance = (Math.random() * 20).toFixed(3);\r",
											"\r",
											"// Set variables with generated values\r",
											"pm.variables.set(\"itemCode\", randomItemCode);\r",
											"pm.variables.set(\"itemSearchCode\", randomItemSearchCode);\r",
											"pm.variables.set(\"distressPattern\", randomDistressPattern);\r",
											"pm.variables.set(\"vulnerabilityScale\", randomVulnerabilityScale);\r",
											"pm.variables.set(\"scoreReference\", randomScoreReference);\r",
											"pm.variables.set(\"numericalScore\", randomNumericalScore);\r",
											"pm.variables.set(\"capturedWithCameraType\", randomCameraType);\r",
											"pm.variables.set(\"lightAndWeatherCondition\", randomLightAndWeatherCondition);\r",
											"pm.variables.set(\"capturingDistance\", randomCapturingDistance);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"imageProcessingId\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"imageProcessingId\", jsonData.data.imageProcessingId);\r",
											"});\r",
											"\r",
											"\r",
											"// Test script\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains success message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Image processing data added successfully\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Success is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"// Retrieve the values used in the request\r",
											"let itemCode = pm.variables.get(\"itemCode\");\r",
											"let itemSearchCode = pm.variables.get(\"itemSearchCode\");\r",
											"let distressPattern = pm.variables.get(\"distressPattern\");\r",
											"let vulnerabilityScale = pm.variables.get(\"vulnerabilityScale\");\r",
											"let scoreReference = pm.variables.get(\"scoreReference\");\r",
											"let numericalScore = pm.variables.get(\"numericalScore\");\r",
											"let capturedWithCameraType = pm.variables.get(\"capturedWithCameraType\");\r",
											"let lightAndWeatherCondition = pm.variables.get(\"lightAndWeatherCondition\");\r",
											"let capturingDistance = pm.variables.get(\"capturingDistance\");\r",
											"\r",
											"\r",
											"// Set the values in the environment or collection\r",
											"pm.environment.set(\"itemCodeAdd\", itemCode);\r",
											"pm.environment.set(\"itemSearchCodeAdd\", itemSearchCode);\r",
											"pm.environment.set(\"distressPatternAdd\", distressPattern);\r",
											"pm.environment.set(\"vulnerabilityScaleAdd\", vulnerabilityScale);\r",
											"pm.environment.set(\"scoreReferenceAdd\", scoreReference);\r",
											"pm.environment.set(\"numericalScoreAdd\", numericalScore);\r",
											"pm.environment.set(\"capturedWithCameraTypeAdd\", capturedWithCameraType);\r",
											"pm.environment.set(\"lightAndWeatherConditionAdd\", lightAndWeatherCondition);\r",
											"pm.environment.set(\"capturingDistanceAdd\", capturingDistance);\r",
											"\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'data' contains 'imageProcessingId'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.have.property(\"imageProcessingId\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"itemCode\": \"{{itemCode}}\",\r\n    \"itemSearchCode\": \"{{itemSearchCode}}\",\r\n    \"distressPattern\": \"{{distressPattern}}\",\r\n    \"vulnerabilityScale\": \"{{vulnerabilityScale}}\",\r\n    \"scoreReference\": \"{{scoreReference}}\",\r\n    \"numericalScore\": {{numericalScore}},\r\n    \"capturedWithCameraType\": \"{{capturedWithCameraType}}\",\r\n    \"lightAndWeatherCondition\": \"{{lightAndWeatherCondition}}\",\r\n    \"capturingDistance\": {{capturingDistance}},\r\n    \"audio\": \"b07f8f36-9e29-425f-aa05-726e030b14e3.mp3\",\r\n    \"referenceImages\": [\r\n        {\r\n            \"image\": \"b7b4f120-9e58-4f49-876a-30f25851544b.jpg\",\r\n            \"description\": \"Description 1\"\r\n        },\r\n        {\r\n            \"image\": \"55c15262-5158-4d70-8545-843d58cb60dd.gif\",\r\n            \"description\": \"Description 2\"\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}image-processing-add",
									"host": [
										"{{base_url}}image-processing-add"
									]
								}
							},
							"response": []
						},
						{
							"name": "image processing list-after-add",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the response JSON\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"// Verify that the message is as expected\r",
											"pm.test(\"Verify message\", function () {\r",
											"    pm.expect(jsonData.message).to.eql(\"Image processing data fetched successfully\");\r",
											"});\r",
											"\r",
											"// Verify that success is true\r",
											"pm.test(\"Verify success is true\", function () {\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"// Verify that the status code is 200\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Retrieve the imageProcessingId from the response\r",
											"let responseImageProcessingId = jsonData.data[0].imageProcessingId;\r",
											"\r",
											"// Retrieve the imageProcessingId variable value\r",
											"let expectedImageProcessingId = pm.variables.get(\"imageProcessingId\");\r",
											"\r",
											"// Compare the imageProcessingId from the response with the stored variable\r",
											"pm.test(\"Verify imageProcessingId matches\", function () {\r",
											"    pm.expect(responseImageProcessingId).to.eql(parseInt(expectedImageProcessingId));\r",
											"});\r",
											"\r",
											"// Set environment variables for each referenceImagesId\r",
											"jsonData.data[0].referenceImages.forEach(function(image, index) {\r",
											"    pm.environment.set(\"referenceImagesId_\" + (index + 1), image.referenceImagesId);\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"let responseBody = pm.response.json();\r",
											"\r",
											"// Extract data from the response\r",
											"let responseitemCode = responseBody.data[0].itemCode;\r",
											"let responseitemSearchCode = responseBody.data[0].itemSearchCode;\r",
											"let responsedistressPattern = responseBody.data[0].distressPattern;\r",
											"let responsevulnerabilityScale = responseBody.data[0].vulnerabilityScale;\r",
											"let responsescoreReference = responseBody.data[0].scoreReference;\r",
											"let responsenumericalScore = responseBody.data[0].numericalScore;\r",
											"let responsecapturedWithCameraType = responseBody.data[0].capturedWithCameraType;\r",
											"let responselightAndWeatherCondition = responseBody.data[0].lightAndWeatherCondition;\r",
											"let responsecapturingDistance = responseBody.data[0].capturingDistance;\r",
											"\r",
											"// Retrieve the stored variables\r",
											"let storeditemCode = pm.variables.get(\"itemCodeAdd\"); // Get from local variable scope\r",
											"let storeditemSearchCode = pm.variables.get(\"itemSearchCodeAdd\"); // Get from local variable scope\r",
											"let storeddistressPattern = pm.variables.get(\"distressPatternAdd\"); // Get from local variable scope\r",
											"let storedvulnerabilityScale = pm.variables.get(\"vulnerabilityScaleAdd\"); // Get from local variable scope\r",
											"let storedscoreReference = pm.variables.get(\"scoreReferenceAdd\"); // Get from local variable scope\r",
											"let storednumericalScore = pm.variables.get(\"numericalScoreAdd\"); // Get from local variable scope\r",
											"let storedcapturedWithCameraType = pm.variables.get(\"capturedWithCameraTypeAdd\"); // Get from local variable scope\r",
											"let storedlightAndWeatherCondition = pm.variables.get(\"lightAndWeatherConditionAdd\"); // Get from local variable scope\r",
											"let storedcapturingDistance = pm.variables.get(\"capturingDistanceAdd\"); // Get from local variable scope\r",
											"\r",
											"\r",
											"pm.test(\"all are correct\", function () {\r",
											"    pm.expect(responseitemCode).to.eql(storeditemCode);\r",
											"    pm.expect(responseitemSearchCode).to.eql(storeditemSearchCode);\r",
											"    pm.expect(responsedistressPattern).to.eql(storeddistressPattern);\r",
											"    pm.expect(responsevulnerabilityScale).to.eql(storedvulnerabilityScale);\r",
											"    pm.expect(responsescoreReference).to.eql(storedscoreReference);\r",
											"    pm.expect(responsenumericalScore).to.eql(storednumericalScore);\r",
											"    pm.expect(responsecapturedWithCameraType).to.eql(storedcapturedWithCameraType);\r",
											"    pm.expect(responselightAndWeatherCondition).to.eql(storedlightAndWeatherCondition);\r",
											"    pm.expect(responsecapturingDistance).to.eql(parseFloat(storedcapturingDistance));\r",
											"});\r",
											"\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that 'data' is an array and contains at least one item\r",
											"pm.test(\"Verify 'data' is an array and contains at least one item\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"});\r",
											"\r",
											"// Access the first item in the 'data' array\r",
											"const firstDataItem = actualResponse.data[0];\r",
											"\r",
											"// Verify general fields in the 'data' object\r",
											"pm.test(\"Verify general fields in the 'data' object\", function () {\r",
											"    pm.expect(firstDataItem).to.have.property(\"audio\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"capturedWithCameraType\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"capturingDistance\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"distressPattern\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"imageProcessingId\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"isActive\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"itemCode\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"itemSearchCode\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"lightAndWeatherCondition\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"numericalScore\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"scoreReference\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"vulnerabilityScale\");\r",
											"});\r",
											"\r",
											"// Verify the first 'referenceImages' object in the array\r",
											"pm.test(\"Verify the first 'referenceImages' object\", function () {\r",
											"    const referenceImage = firstDataItem.referenceImages[0];\r",
											"    pm.expect(referenceImage).to.have.property(\"description\");\r",
											"    pm.expect(referenceImage).to.have.property(\"image\");\r",
											"    pm.expect(referenceImage).to.have.property(\"referenceImagesId\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n\t\"imageProcessingId\": {{imageProcessingId}}\r\n}\r\n\r\n// {\r\n\r\n// }\r\n\r\n// {\r\n//     \"isActive\":1\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}image-processing-data",
									"host": [
										"{{base_url}}image-processing-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "image processing list-after-isActive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Get the current isActive value from the environment\r",
											"let isActive = pm.environment.get(\"isActive\");\r",
											"\r",
											"// Define the expected response \r",
											"function validateDataIsPresent(response) {\r",
											"    pm.test(\"Response should have success set to true\", () => {\r",
											"        pm.expect(response.success).to.be.true;\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should have statusCode 200\", () => {\r",
											"        pm.expect(response.statusCode).to.eql(200);\r",
											"    });\r",
											"\r",
											"     // Check if the data array is not empty\r",
											"    if (response.data.length > 0) {\r",
											"        // Verify that the first element in the data array has the correct isActive value\r",
											"        pm.test(\"First data element should have isActive value matching the request\", () => {\r",
											"            pm.expect(response.data[0]).to.have.property('isActive', isActive);\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"// Define the expected response \r",
											"function validateNoDataIsPresent(response) {\r",
											"    pm.test(\"Response should have success set to true\", () => {\r",
											"        pm.expect(response.success).to.be.true;\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should have statusCode 200\", () => {\r",
											"        pm.expect(response.statusCode).to.eql(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should contain an empty data array\", () => {\r",
											"        pm.expect(response.data).to.be.an('array').that.is.empty;\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"// Parse the response\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Check if the isActive value is 0 or 1\r",
											"if ([0, 1].includes(isActive)) {\r",
											"    pm.test(`isActive is '${isActive}', validate response accordingly`, () => {\r",
											"        if (response.data && response.data.length > 0) {\r",
											"            validateDataIsPresent(response);\r",
											"        } else {\r",
											"            validateNoDataIsPresent(response);\r",
											"        }\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Unexpected isActive value\", () => {\r",
											"        pm.expect.fail(`Received unexpected isActive value: ${isActive}`);\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Get the current isActive value from the environment, or initialize it to 0\r",
											"let isActive = pm.environment.get(\"isActive\") || 0;\r",
											"\r",
											"// Toggle isActive between 0 and 1\r",
											"isActive = (isActive === 1) ? 0 : 1;\r",
											"\r",
											"// Set the updated isActive back to the environment\r",
											"pm.environment.set(\"isActive\", isActive);\r",
											"\r",
											"// Set the isActive in the request body\r",
											"let requestData = {\r",
											"    \"isActive\": isActive\r",
											"};\r",
											"\r",
											"// Update the request body with the new isActive value\r",
											"pm.request.body.raw = JSON.stringify(requestData);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// { \r\n// \t\"imageProcessingId\": {{imageProcessingId}}\r\n// }\r\n\r\n// {\r\n\r\n// }\r\n\r\n{\r\n    \"isActive\":{{isActive}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}image-processing-data",
									"host": [
										"{{base_url}}image-processing-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "image processing list-after-add-full",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the response JSON\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"// Verify that the message is as expected\r",
											"pm.test(\"Verify message\", function () {\r",
											"    pm.expect(jsonData.message).to.eql(\"Image processing data fetched successfully\");\r",
											"});\r",
											"\r",
											"// Verify that success is true\r",
											"pm.test(\"Verify success is true\", function () {\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"// Verify that the status code is 200\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that 'data' is an array and contains at least one item\r",
											"pm.test(\"Verify 'data' is an array and contains at least one item\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"});\r",
											"\r",
											"// Access the first item in the 'data' array\r",
											"const firstDataItem = actualResponse.data[0];\r",
											"\r",
											"// Verify general fields in the 'data' object\r",
											"pm.test(\"Verify general fields in the 'data' object\", function () {\r",
											"    pm.expect(firstDataItem).to.have.property(\"audio\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"capturedWithCameraType\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"capturingDistance\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"distressPattern\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"imageProcessingId\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"isActive\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"itemCode\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"itemSearchCode\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"lightAndWeatherCondition\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"numericalScore\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"scoreReference\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"vulnerabilityScale\");\r",
											"});\r",
											"\r",
											"// Verify the first 'referenceImages' object in the array\r",
											"pm.test(\"Verify the first 'referenceImages' object\", function () {\r",
											"    const referenceImage = firstDataItem.referenceImages[0];\r",
											"    pm.expect(referenceImage).to.have.property(\"description\");\r",
											"    pm.expect(referenceImage).to.have.property(\"image\");\r",
											"    pm.expect(referenceImage).to.have.property(\"referenceImagesId\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// { \r\n// \t\"imageProcessingId\": {{imageProcessingId}}\r\n// }\r\n\r\n{\r\n\r\n}\r\n\r\n// {\r\n//     \"isActive\":1\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}image-processing-data",
									"host": [
										"{{base_url}}image-processing-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "image processing update",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random string of given length\r",
											"function generateRandomString(length) {\r",
											"    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Function to generate a random numerical value within a range\r",
											"function generateRandomNumber(min, max) {\r",
											"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
											"}\r",
											"\r",
											"// Generate random values\r",
											"let randomItemCode = generateRandomNumber(10000, 99999).toString();\r",
											"let randomItemSearchCode = generateRandomNumber(1000, 9999).toString();\r",
											"let randomDistressPattern = \"pattern_\" + generateRandomString(10);\r",
											"let randomVulnerabilityScale = \"high\" + generateRandomNumber(1, 5);\r",
											"let randomScoreReference = \"ref_\" + generateRandomNumber(1000, 9999).toString();\r",
											"let randomNumericalScore = generateRandomNumber(800, 900);\r",
											"let randomCameraType = \"DSLR\" + generateRandomNumber(1, 5);\r",
											"let randomLightAndWeatherCondition = \"sunny\" + generateRandomNumber(1, 5);\r",
											"let randomCapturingDistance = (Math.random() * 20).toFixed(3);\r",
											"\r",
											"// Set variables with generated values\r",
											"pm.variables.set(\"itemCode\", randomItemCode);\r",
											"pm.variables.set(\"itemSearchCode\", randomItemSearchCode);\r",
											"pm.variables.set(\"distressPattern\", randomDistressPattern);\r",
											"pm.variables.set(\"vulnerabilityScale\", randomVulnerabilityScale);\r",
											"pm.variables.set(\"scoreReference\", randomScoreReference);\r",
											"pm.variables.set(\"numericalScore\", randomNumericalScore);\r",
											"pm.variables.set(\"capturedWithCameraType\", randomCameraType);\r",
											"pm.variables.set(\"lightAndWeatherCondition\", randomLightAndWeatherCondition);\r",
											"pm.variables.set(\"capturingDistance\", randomCapturingDistance);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test script\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains success message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Image processing data updated successfully\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Success is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"// Define the expected fields\r",
											"const expectedFields = [\"data\", \"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n            \"imageProcessingId\": {{imageProcessingId}},\r\n            \"itemCode\": \"{{itemCode}}\",\r\n            \"itemSearchCode\": \"{{itemSearchCode}}\",\r\n            \"distressPattern\": \"{{distressPattern}}\",\r\n            \"vulnerabilityScale\": \"{{vulnerabilityScale}}\",\r\n            \"scoreReference\": \"{{scoreReference}}\",\r\n            \"numericalScore\": {{numericalScore}},\r\n            \"capturedWithCameraType\": \"{{capturedWithCameraType}}\",\r\n            \"lightAndWeatherCondition\": \"{{lightAndWeatherCondition}}\",\r\n            \"capturingDistance\": {{capturingDistance}},\r\n            \"audio\": \"340d6729-fe89-467b-a1be-87893f3a3b1e.mp3\",\r\n            \"referenceImages\": [\r\n                                                {\r\n                                                    \"referenceImagesId\": {{referenceImagesId_1}},\r\n                                                    \"image\": \"55c15262-5158-4d70-8545-843d58cb60dd.gif\",\r\n                                                    \"description\": \"Description 1\"\r\n                                                },\r\n                                                {\r\n                                                    \"referenceImagesId\": {{referenceImagesId_2}},\r\n                                                    \"image\": \"b7b4f120-9e58-4f49-876a-30f25851544b.jpg\",\r\n                                                    \"description\": \"Description 2\"\r\n                                                }\r\n                                ]\r\n}\r\n        \r\n    ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}image-processing-update",
									"host": [
										"{{base_url}}image-processing-update"
									]
								}
							},
							"response": []
						},
						{
							"name": "image-processing-list-after-update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the response JSON\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"// Verify that the message is as expected\r",
											"pm.test(\"Verify message\", function () {\r",
											"    pm.expect(jsonData.message).to.eql(\"Image processing data fetched successfully\");\r",
											"});\r",
											"\r",
											"// Verify that success is true\r",
											"pm.test(\"Verify success is true\", function () {\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"// Verify that the status code is 200\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Retrieve the imageProcessingId from the response\r",
											"let responseImageProcessingId = jsonData.data[0].imageProcessingId;\r",
											"\r",
											"// Retrieve the imageProcessingId variable value\r",
											"let expectedImageProcessingId = pm.variables.get(\"imageProcessingId\");\r",
											"\r",
											"// Compare the imageProcessingId from the response with the stored variable\r",
											"pm.test(\"Verify imageProcessingId matches\", function () {\r",
											"    pm.expect(responseImageProcessingId).to.eql(parseInt(expectedImageProcessingId));\r",
											"});\r",
											"\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that 'data' is an array and contains at least one item\r",
											"pm.test(\"Verify 'data' is an array and contains at least one item\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"});\r",
											"\r",
											"// Access the first item in the 'data' array\r",
											"const firstDataItem = actualResponse.data[0];\r",
											"\r",
											"// Verify general fields in the 'data' object\r",
											"pm.test(\"Verify general fields in the 'data' object\", function () {\r",
											"    pm.expect(firstDataItem).to.have.property(\"audio\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"capturedWithCameraType\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"capturingDistance\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"distressPattern\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"imageProcessingId\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"isActive\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"itemCode\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"itemSearchCode\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"lightAndWeatherCondition\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"numericalScore\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"scoreReference\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"vulnerabilityScale\");\r",
											"});\r",
											"\r",
											"// Verify the first 'referenceImages' object in the array\r",
											"pm.test(\"Verify the first 'referenceImages' object\", function () {\r",
											"    const referenceImage = firstDataItem.referenceImages[0];\r",
											"    pm.expect(referenceImage).to.have.property(\"description\");\r",
											"    pm.expect(referenceImage).to.have.property(\"image\");\r",
											"    pm.expect(referenceImage).to.have.property(\"referenceImagesId\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n\t\"imageProcessingId\": {{imageProcessingId}}\r\n}\r\n\r\n// {\r\n\r\n// }\r\n\r\n// {\r\n//     \"isActive\":1\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}image-processing-data",
									"host": [
										"{{base_url}}image-processing-data"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Notice",
					"item": [
						{
							"name": "notice-add",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"noticeId\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"noticeId\", jsonData.data.noticeId);\r",
											"});\r",
											"\r",
											"\r",
											"// Test script\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains success message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Media added successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains noticeId\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.have.property(\"noticeId\");\r",
											"    pm.expect(jsonData.data.noticeId).to.be.a('number');\r",
											"});\r",
											"\r",
											"pm.test(\"Success is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"// Retrieve the values used in the request\r",
											"let title = pm.variables.get(\"title\");\r",
											"\r",
											"// Set the values in the environment or collection\r",
											"pm.environment.set(\"titleAdd\", title);\r",
											"\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'data' contains 'noticeId'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.have.property(\"noticeId\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random string of given length\r",
											"function generateRandomString(length) {\r",
											"    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"\r",
											"// Generate random values\r",
											"let randomtitle = generateRandomString(6);\r",
											"\r",
											"// Set variables with generated values\r",
											"pm.variables.set(\"title\", randomtitle);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"media\": \"766bdba9-b47d-4485-9b58-dddfae858f90.mp4\",\r\n    \"title\":\"{{title}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}notice-add",
									"host": [
										"{{base_url}}notice-add"
									]
								}
							},
							"response": []
						},
						{
							"name": "notice-data-after-add",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 'message' is 'Notice fetched successfully'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Notice fetched successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"\r",
											"// Parse the response body\r",
											"let responseBody = pm.response.json();\r",
											"\r",
											"// Extract data from the response\r",
											"let responstitle = responseBody.data[0].title;\r",
											"\r",
											"// Retrieve the stored variables\r",
											"let storedtitle = pm.variables.get(\"titleAdd\"); // Get from local variable scope\r",
											"\r",
											"\r",
											"// Verify surveyorRank\r",
											"pm.test(\"title is correct\", function () {\r",
											"    pm.expect(responstitle).to.eql(storedtitle);\r",
											"});\r",
											"\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that 'data' is an array and contains at least one item\r",
											"pm.test(\"Verify 'data' is an array and contains at least one item\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"});\r",
											"\r",
											"// Access the first item in the 'data' array\r",
											"const firstDataItem = actualResponse.data[0];\r",
											"\r",
											"// Verify 'country', 'createdBy', 'isActive', 'stateId', 'stateName', and 'updatedBy' in the first data item\r",
											"pm.test(\"Verify 'isActive', 'title', 'isActive', 'type' in the first data item\", function () {\r",
											"    pm.expect(firstDataItem).to.have.property(\"isActive\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"media\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"title\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"type\");\r",
											" \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// {\r\n//   \"isActive\": 1\r\n// }\r\n\r\n// {\r\n\r\n// }\r\n\r\n{\r\n  \"noticeId\": {{noticeId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}notice-data",
									"host": [
										"{{base_url}}notice-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "notice-data-after-add-isActive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Get the current isActive value from the environment\r",
											"let isActive = pm.environment.get(\"isActive\");\r",
											"\r",
											"// Define the expected response \r",
											"function validateDataIsPresent(response) {\r",
											"    pm.test(\"Response should have success set to true\", () => {\r",
											"        pm.expect(response.success).to.be.true;\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should have statusCode 200\", () => {\r",
											"        pm.expect(response.statusCode).to.eql(200);\r",
											"    });\r",
											"\r",
											"     // Check if the data array is not empty\r",
											"    if (response.data.length > 0) {\r",
											"        // Verify that the first element in the data array has the correct isActive value\r",
											"        pm.test(\"First data element should have isActive value matching the request\", () => {\r",
											"            pm.expect(response.data[0]).to.have.property('isActive', isActive);\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"// Define the expected response \r",
											"function validateNoDataIsPresent(response) {\r",
											"    pm.test(\"Response should have success set to true\", () => {\r",
											"        pm.expect(response.success).to.be.true;\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should have statusCode 200\", () => {\r",
											"        pm.expect(response.statusCode).to.eql(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should contain an empty data array\", () => {\r",
											"        pm.expect(response.data).to.be.an('array').that.is.empty;\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"// Parse the response\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Check if the isActive value is 0 or 1\r",
											"if ([0, 1].includes(isActive)) {\r",
											"    pm.test(`isActive is '${isActive}', validate response accordingly`, () => {\r",
											"        if (response.data && response.data.length > 0) {\r",
											"            validateDataIsPresent(response);\r",
											"        } else {\r",
											"            validateNoDataIsPresent(response);\r",
											"        }\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Unexpected isActive value\", () => {\r",
											"        pm.expect.fail(`Received unexpected isActive value: ${isActive}`);\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Get the current isActive value from the environment, or initialize it to 0\r",
											"let isActive = pm.environment.get(\"isActive\") || 0;\r",
											"\r",
											"// Toggle isActive between 0 and 1\r",
											"isActive = (isActive === 1) ? 0 : 1;\r",
											"\r",
											"// Set the updated isActive back to the environment\r",
											"pm.environment.set(\"isActive\", isActive);\r",
											"\r",
											"// Set the isActive in the request body\r",
											"let requestData = {\r",
											"    \"isActive\": isActive\r",
											"};\r",
											"\r",
											"// Update the request body with the new isActive value\r",
											"pm.request.body.raw = JSON.stringify(requestData);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"isActive\": {{isActive}}\r\n}\r\n\r\n// {\r\n\r\n// }\r\n\r\n// {\r\n//   \"noticeId\": {{noticeId}}\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}notice-data",
									"host": [
										"{{base_url}}notice-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "notice-data-after-add-full",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 'message' is 'Notice fetched successfully'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Notice fetched successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that 'data' is an array and contains at least one item\r",
											"pm.test(\"Verify 'data' is an array and contains at least one item\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"});\r",
											"\r",
											"// Access the first item in the 'data' array\r",
											"const firstDataItem = actualResponse.data[0];\r",
											"\r",
											"// Verify 'country', 'createdBy', 'isActive', 'stateId', 'stateName', and 'updatedBy' in the first data item\r",
											"pm.test(\"Verify 'createdBy', 'isActive', 'title', 'isActive', 'noticeId', 'type' and 'updatedBy' in the first data item\", function () {\r",
											"    pm.expect(firstDataItem).to.have.property(\"createdBy\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"noticeId\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"isActive\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"media\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"title\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"type\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"updatedBy\");\r",
											" \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// {\r\n//   \"isActive\": 1\r\n// }\r\n\r\n{\r\n\r\n}\r\n\r\n// {\r\n//   \"noticeId\": {{noticeId}}\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}notice-data",
									"host": [
										"{{base_url}}notice-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "notice-update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test script\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains success message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Media updated successfully\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Success is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"// Retrieve the value used in the request\r",
											"let title = pm.variables.get(\"title\");\r",
											"\r",
											"// Set the value in the environment or collection\r",
											"pm.environment.set(\"title\", title);\r",
											"\r",
											"// Optionally, log the value to ensure it was set correctly\r",
											"console.log(\"title:\", title);\r",
											"\r",
											"// Define the expected fields\r",
											"const expectedFields = [\"data\", \"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random string of given length\r",
											"function generateRandomString(length) {\r",
											"    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"\r",
											"// Generate random values\r",
											"let randomtitle = generateRandomString(6);\r",
											"\r",
											"// Set variables with generated values\r",
											"pm.variables.set(\"title\", randomtitle);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"noticeId\":{{noticeId}},\r\n    \"media\": \"afd6f02e-2f84-4cfc-a248-ba202a2345b0.mp4\",\r\n    \"title\":\"{{title}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}notice-update",
									"host": [
										"{{base_url}}notice-update"
									]
								}
							},
							"response": []
						},
						{
							"name": "notice-data-after-update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 'message' is 'Notice fetched successfully'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Notice fetched successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"\r",
											"// Parse the response body\r",
											"let responseBody = pm.response.json();\r",
											"\r",
											"// Extract data from the response\r",
											"let responsetitle = responseBody.data[0].title; // Adjust this according to your response structure\r",
											"\r",
											"\r",
											"// Retrieve the stored variables\r",
											"let storedtitle = pm.variables.get(\"title\");\r",
											"\r",
											"\r",
											"// Verify title\r",
											"pm.test(\"title is correct\", function () {\r",
											"    pm.expect(responsetitle).to.eql(storedtitle);\r",
											"});\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that 'data' is an array and contains at least one item\r",
											"pm.test(\"Verify 'data' is an array and contains at least one item\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"});\r",
											"\r",
											"// Access the first item in the 'data' array\r",
											"const firstDataItem = actualResponse.data[0];\r",
											"\r",
											"// Verify 'country', 'createdBy', 'isActive', 'stateId', 'stateName', and 'updatedBy' in the first data item\r",
											"pm.test(\"Verify 'isActive', 'title', 'isActive', 'type' in the first data item\", function () {\r",
											"    pm.expect(firstDataItem).to.have.property(\"isActive\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"media\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"title\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"type\");\r",
											" \r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// {\r\n//   \"isActive\": 1\r\n// }\r\n\r\n// {\r\n\r\n// }\r\n\r\n{\r\n  \"noticeId\": {{noticeId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}notice-data",
									"host": [
										"{{base_url}}notice-data"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "structure",
					"item": [
						{
							"name": "structure-add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random string of given length\r",
											"function generateRandomString(length) {\r",
											"    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"\r",
											"// Generate random values\r",
											"let randomstructure = generateRandomString(6);\r",
											"\r",
											"// Set variables with generated values\r",
											"pm.variables.set(\"structure\", randomstructure);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"structureId\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"structureId\", jsonData.data.structureId);\r",
											"});\r",
											"\r",
											"\r",
											"// Test script\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains success message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Structure added successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains structureId\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.have.property(\"structureId\");\r",
											"    pm.expect(jsonData.data.structureId).to.be.a('number');\r",
											"});\r",
											"\r",
											"pm.test(\"Success is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"// Retrieve the values used in the request\r",
											"let structure = pm.variables.get(\"structure\");\r",
											"\r",
											"// Set the values in the environment or collection\r",
											"pm.environment.set(\"structure1\", structure);\r",
											"\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'data' contains 'structureId'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.have.property(\"structureId\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"structure\":\"{{structure}}\",\r\n    \"image\":\"46a574ea-e4c7-4492-8c3f-75ca400aef31.jpg\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}structure-add",
									"host": [
										"{{base_url}}structure-add"
									]
								}
							},
							"response": []
						},
						{
							"name": "structure-add-already-exists",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test script\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains errors\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0]).to.eql(\"This structure already exists.\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Success is false\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"\r",
											"// Define the expected fields\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"structure\":\"{{structure1}}\",\r\n    \"image\":\"46a574ea-e4c7-4492-8c3f-75ca400aef31.jpg\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}structure-add",
									"host": [
										"{{base_url}}structure-add"
									]
								}
							},
							"response": []
						},
						{
							"name": "structure-list-after-add",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 'message' is 'Structure data fetched successfully'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Structure data fetched successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"\r",
											"// Parse the response body\r",
											"let responseBody = pm.response.json();\r",
											"\r",
											"// Extract data from the response\r",
											"let responsestructure = responseBody.data[0].structureName;\r",
											"\r",
											"// Retrieve the stored variables\r",
											"let storedstructure = pm.variables.get(\"structure1\"); // Get from local variable scope\r",
											"\r",
											"\r",
											"// Verify surveyorRank\r",
											"pm.test(\"structure is correct\", function () {\r",
											"    pm.expect(responsestructure).to.eql(storedstructure);\r",
											"});\r",
											"\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that the 'data' field is an array and contains the expected fields within the first object\r",
											"pm.test(\"Verify that 'data' contains the expected fields\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"    \r",
											"    const user = actualResponse.data[0];\r",
											"    const userExpectedFields = [\"components\", \"createdBy\", \"details\", \"image\",  \"images\", \"isActive\", \"problems\",\"structureId\", \"structureName\", \"updatedBy\", \"video\"];\r",
											"    \r",
											"    userExpectedFields.forEach(field => {\r",
											"        pm.expect(user).to.have.property(field);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"structureId\": {{structureId}}\r\n}\r\n\r\n// {\r\n\r\n// }\r\n\r\n// {\r\n//     \"isActive\":0\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}structure-data",
									"host": [
										"{{base_url}}structure-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "structure-list-after-add-isActive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Get the current isActive value from the environment\r",
											"let isActive = pm.environment.get(\"isActive\");\r",
											"\r",
											"// Define the expected response \r",
											"function validateDataIsPresent(response) {\r",
											"    pm.test(\"Response should have success set to true\", () => {\r",
											"        pm.expect(response.success).to.be.true;\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should have statusCode 200\", () => {\r",
											"        pm.expect(response.statusCode).to.eql(200);\r",
											"    });\r",
											"\r",
											"     // Check if the data array is not empty\r",
											"    if (response.data.length > 0) {\r",
											"        // Verify that the first element in the data array has the correct isActive value\r",
											"        pm.test(\"First data element should have isActive value matching the request\", () => {\r",
											"            pm.expect(response.data[0]).to.have.property('isActive', isActive);\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"// Define the expected response \r",
											"function validateNoDataIsPresent(response) {\r",
											"    pm.test(\"Response should have success set to true\", () => {\r",
											"        pm.expect(response.success).to.be.true;\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should have statusCode 200\", () => {\r",
											"        pm.expect(response.statusCode).to.eql(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should contain an empty data array\", () => {\r",
											"        pm.expect(response.data).to.be.an('array').that.is.empty;\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"// Parse the response\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Check if the isActive value is 0 or 1\r",
											"if ([0, 1].includes(isActive)) {\r",
											"    pm.test(`isActive is '${isActive}', validate response accordingly`, () => {\r",
											"        if (response.data && response.data.length > 0) {\r",
											"            validateDataIsPresent(response);\r",
											"        } else {\r",
											"            validateNoDataIsPresent(response);\r",
											"        }\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Unexpected isActive value\", () => {\r",
											"        pm.expect.fail(`Received unexpected isActive value: ${isActive}`);\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Get the current isActive value from the environment, or initialize it to 0\r",
											"let isActive = pm.environment.get(\"isActive\") || 0;\r",
											"\r",
											"// Toggle isActive between 0 and 1\r",
											"isActive = (isActive === 1) ? 0 : 1;\r",
											"\r",
											"// Set the updated isActive back to the environment\r",
											"pm.environment.set(\"isActive\", isActive);\r",
											"\r",
											"// Set the isActive in the request body\r",
											"let requestData = {\r",
											"    \"isActive\": isActive\r",
											"};\r",
											"\r",
											"// Update the request body with the new isActive value\r",
											"pm.request.body.raw = JSON.stringify(requestData);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// {\r\n//   \"structureId\": {{structureId}}\r\n// }\r\n\r\n// {\r\n\r\n// }\r\n\r\n{\r\n    \"isActive\":{{isActive}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}structure-data",
									"host": [
										"{{base_url}}structure-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "structure-list-after-add-full",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"structureName\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"structureNameFromList\", jsonData.data[0].structureName);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify 'message' is 'Structure data fetched successfully'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Structure data fetched successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that the 'data' field is an array and contains the expected fields within the first object\r",
											"pm.test(\"Verify that 'data' contains the expected fields\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"    \r",
											"    const user = actualResponse.data[0];\r",
											"    const userExpectedFields = [\"components\", \"createdBy\", \"details\", \"image\",  \"images\", \"isActive\", \"problems\",\"structureId\", \"structureName\", \"updatedBy\", \"video\"];\r",
											"    \r",
											"    userExpectedFields.forEach(field => {\r",
											"        pm.expect(user).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// {\r\n//   \"structureId\": {{structureId}}\r\n// }\r\n\r\n{\r\n\r\n}\r\n\r\n// {\r\n//     \"isActive\":0\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}structure-data",
									"host": [
										"{{base_url}}structure-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "structure-update",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random string of given length\r",
											"function generateRandomString(length) {\r",
											"    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"\r",
											"// Generate random values\r",
											"let randomstructure = generateRandomString(6);\r",
											"\r",
											"// Set variables with generated values\r",
											"pm.variables.set(\"structure\", randomstructure);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test script\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains success message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Structure updated successfully\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Success is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"// Retrieve the value used in the request\r",
											"let structure = pm.variables.get(\"structure\");\r",
											"\r",
											"// Set the value in the environment or collection\r",
											"pm.environment.set(\"structure\", structure);\r",
											"\r",
											"// Optionally, log the value to ensure it was set correctly\r",
											"console.log(\"structure:\", structure);\r",
											"\r",
											"// Define the expected fields\r",
											"const expectedFields = [\"data\", \"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"structureId\":{{structureId}},\r\n    \"structure\":\"{{structure}}\",\r\n    \"image\":\"aac64967-6c44-496b-b33d-6fd8969cecf5.png\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}structure-update",
									"host": [
										"{{base_url}}structure-update"
									]
								}
							},
							"response": []
						},
						{
							"name": "structure-update-already-exists",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test script\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains errors\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0]).to.eql(\"Structure already exists.\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Success is false\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"\r",
											"// Define the expected fields\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"structureId\":{{structureId}},\r\n    \"structure\":\"{{structureNameFromList}}\",\r\n    \"image\":\"aac64967-6c44-496b-b33d-6fd8969cecf5.png\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}structure-update",
									"host": [
										"{{base_url}}structure-update"
									]
								}
							},
							"response": []
						},
						{
							"name": "structure-list-after-update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 'message' is 'Structure data fetched successfully'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Structure data fetched successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"let responseBody = pm.response.json();\r",
											"\r",
											"// Extract data from the response\r",
											"let responsestructure = responseBody.data[0].structureName;\r",
											"\r",
											"\r",
											"// Retrieve the stored variables\r",
											"let storedstructure = pm.variables.get(\"structure\"); // Get from local variable scope\r",
											"\r",
											"\r",
											"// Verify responsestructure\r",
											"pm.test(\"responsestructure is correct\", function () {\r",
											"    pm.expect(responsestructure).to.eql(storedstructure);\r",
											"});\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that the 'data' field is an array and contains the expected fields within the first object\r",
											"pm.test(\"Verify that 'data' contains the expected fields\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"    \r",
											"    const user = actualResponse.data[0];\r",
											"    const userExpectedFields = [\"components\", \"createdBy\", \"details\", \"image\",  \"images\", \"isActive\", \"problems\",\"structureId\", \"structureName\", \"updatedBy\", \"video\"];\r",
											"    \r",
											"    userExpectedFields.forEach(field => {\r",
											"        pm.expect(user).to.have.property(field);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"structureId\": {{structureId}}\r\n}\r\n\r\n// {\r\n\r\n// }\r\n\r\n// {\r\n//     \"isActive\":0\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}structure-data",
									"host": [
										"{{base_url}}structure-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "structure-help-add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random string of given length\r",
											"function generateRandomString(length) {\r",
											"    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"\r",
											"// Generate random values\r",
											"let randomdetails = generateRandomString(6);\r",
											"\r",
											"// Set variables with generated values\r",
											"pm.variables.set(\"details\", randomdetails);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test script\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains success message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Structure help details added successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Success is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"// Retrieve the values used in the request\r",
											"let details = pm.variables.get(\"details\");\r",
											"\r",
											"// Set the values in the environment or collection\r",
											"pm.environment.set(\"details1\", details);\r",
											"\r",
											"\r",
											"// Define the expected fields\r",
											"const expectedFields = [\"data\", \"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"details\":\"{{details}}\",\r\n  \"structureId\":{{structureId}},\r\n  \"images\": [\r\n        \"f96d09f7-8667-4ca3-9f32-79f610cff48dfile_example_JPG_2500kB.jpg\"\r\n    ],\r\n    \"video\":\"bd729f5f-d345-4cca-9a40-bf783f626365.mp4\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}structure-help-add",
									"host": [
										"{{base_url}}structure-help-add"
									]
								}
							},
							"response": []
						},
						{
							"name": "structure-help-list-after-add",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 'message' is 'Structure help data retrieved successfully'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Structure help data retrieved successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"let responseBody = pm.response.json();\r",
											"\r",
											"// Extract data from the response\r",
											"let responsedetails = responseBody.data[0].details;\r",
											"\r",
											"// Retrieve the stored variables\r",
											"let storeddetails = pm.variables.get(\"details1\"); // Get from local variable scope\r",
											"\r",
											"\r",
											"// Verify surveyorRank\r",
											"pm.test(\"details is correct\", function () {\r",
											"    pm.expect(responsedetails).to.eql(storeddetails);\r",
											"});\r",
											"\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that the 'data' field is an array and contains the expected fields within the first object\r",
											"pm.test(\"Verify that 'data' contains the expected fields\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"    \r",
											"    const user = actualResponse.data[0];\r",
											"    const userExpectedFields = [\"details\"];\r",
											"    \r",
											"    userExpectedFields.forEach(field => {\r",
											"        pm.expect(user).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// {\r\n  \r\n// }\r\n\r\n{\r\n  \"structureId\" : {{structureId}} \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}structure-help-data",
									"host": [
										"{{base_url}}structure-help-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "structure-help-list-after-add-full",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 'message' is 'Structure help data retrieved successfully'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Structure help data retrieved successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that the 'data' field is an array and contains the expected fields within the first object\r",
											"pm.test(\"Verify that 'data' contains the expected fields\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"    \r",
											"    const user = actualResponse.data[0];\r",
											"    const userExpectedFields = [\"createdBy\", \"details\", \"updatedBy\"];\r",
											"    \r",
											"    userExpectedFields.forEach(field => {\r",
											"        pm.expect(user).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \r\n}\r\n\r\n// {\r\n//   \"structureId\" : {{structureId}} \r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}structure-help-data",
									"host": [
										"{{base_url}}structure-help-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "structure-help-update",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random string of given length\r",
											"function generateRandomString(length) {\r",
											"    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"\r",
											"// Generate random values\r",
											"let randomdetails = generateRandomString(6);\r",
											"\r",
											"// Set variables with generated values\r",
											"pm.variables.set(\"details\", randomdetails);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test script\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains success message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Structure help details updated successfully.\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Success is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"// Retrieve the value used in the request\r",
											"let details = pm.variables.get(\"details\");\r",
											"\r",
											"// Set the value in the environment or collection\r",
											"pm.environment.set(\"details\", details);\r",
											"\r",
											"// Optionally, log the value to ensure it was set correctly\r",
											"console.log(\"details:\", details);\r",
											"\r",
											"// Define the expected fields\r",
											"const expectedFields = [\"data\", \"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"structureId\": {{structureId}},\r\n    \"details\": \"{{details}}\",\r\n    \"images\": [\r\n        \"e3d816e6-b3ef-4bbf-bced-fc213edde323file_example_GIF_500kB.gif\",\r\n        \"e3d816e6-b3ef-4bbf-bced-fc213edde323file_example_GIF_500kB.gif\"\r\n    ],\r\n    \"video\":\"fa8b0c5f-ec70-4579-a555-affc5cda0a56.mp4\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}structure-help-update",
									"host": [
										"{{base_url}}structure-help-update"
									]
								}
							},
							"response": []
						},
						{
							"name": "structure-help-list-after-update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 'message' is 'Structure help data retrieved successfully'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Structure help data retrieved successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"\r",
											"// Parse the response body\r",
											"let responseBody = pm.response.json();\r",
											"\r",
											"// Extract data from the response\r",
											"let responsedetails = responseBody.data[0].details;\r",
											"\r",
											"\r",
											"// Retrieve the stored variables\r",
											"let storeddetails = pm.variables.get(\"details\"); // Get from local variable scope\r",
											"\r",
											"\r",
											"// Verify details\r",
											"pm.test(\"details is correct\", function () {\r",
											"    pm.expect(responsedetails).to.eql(storeddetails);\r",
											"});\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that the 'data' field is an array and contains the expected fields within the first object\r",
											"pm.test(\"Verify that 'data' contains the expected fields\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"    \r",
											"    const user = actualResponse.data[0];\r",
											"    const userExpectedFields = [\"details\"];\r",
											"    \r",
											"    userExpectedFields.forEach(field => {\r",
											"        pm.expect(user).to.have.property(field);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// {\r\n  \r\n// }\r\n\r\n{\r\n  \"structureId\" : {{structureId}} \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}structure-help-data",
									"host": [
										"{{base_url}}structure-help-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "structure-component-add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random string of given length\r",
											"function generateRandomString(length) {\r",
											"    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"\r",
											"// Generate random values\r",
											"let randomcomponent = generateRandomString(6);\r",
											"\r",
											"// Set variables with generated values\r",
											"pm.variables.set(\"component\", randomcomponent);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"structureComponentsId\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"structureComponentsId\", jsonData.data.structureComponentsId);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Test script\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains success message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Structure components added successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Success is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"// Retrieve the values used in the request\r",
											"let component = pm.variables.get(\"component\");\r",
											"\r",
											"// Set the values in the environment or collection\r",
											"pm.environment.set(\"component1\", component);\r",
											"\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'data' contains 'structureComponentsId'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.have.property(\"structureComponentsId\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n    \"structureComponent\":\"{{component}}\",\r\n    \"structureId\":{{structureId}}\r\n    }   \r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}structure-component-add",
									"host": [
										"{{base_url}}structure-component-add"
									]
								}
							},
							"response": []
						},
						{
							"name": "structure-component-list-after-add",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 'message' is 'Structure components data retrieved successfully'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Structure components data retrieved successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"let responseBody = pm.response.json();\r",
											"\r",
											"// Extract data from the response\r",
											"let responscomponent = responseBody.data[0].components;\r",
											"\r",
											"// Retrieve the stored variables\r",
											"let storedcomponent = pm.variables.get(\"component1\"); // Get from local variable scope\r",
											"\r",
											"\r",
											"// Verify surveyorRank\r",
											"pm.test(\"component is correct\", function () {\r",
											"    pm.expect(responscomponent).to.eql(storedcomponent);\r",
											"});\r",
											"\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that the 'data' field is an array and contains the expected fields within the first object\r",
											"pm.test(\"Verify that 'data' contains the expected fields\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"    \r",
											"    const user = actualResponse.data[0];\r",
											"    const userExpectedFields = [\"components\", \"structureComponentId\"];\r",
											"    \r",
											"    userExpectedFields.forEach(field => {\r",
											"        pm.expect(user).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"structureId\": {{structureId}}\r\n}\r\n\r\n// {\r\n    \r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}structure-component-data",
									"host": [
										"{{base_url}}structure-component-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "structure-component-list-after-add-full",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 'message' is 'Structure components data retrieved successfully'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Structure components data retrieved successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that the 'data' field is an array and contains the expected fields within the first object\r",
											"pm.test(\"Verify that 'data' contains the expected fields\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"    \r",
											"    const user = actualResponse.data[0];\r",
											"    const userExpectedFields = [\"components\", \"createdBy\", \"structureComponentId\", \"updatedBy\"];\r",
											"    \r",
											"    userExpectedFields.forEach(field => {\r",
											"        pm.expect(user).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// {\r\n//    \"structureId\": {{structureId}}\r\n// }\r\n\r\n{\r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}structure-component-data",
									"host": [
										"{{base_url}}structure-component-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "structure-component-update",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random string of given length\r",
											"function generateRandomString(length) {\r",
											"    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"\r",
											"// Generate random values\r",
											"let randomcomponent = generateRandomString(6);\r",
											"\r",
											"// Set variables with generated values\r",
											"pm.variables.set(\"component\", randomcomponent);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test script\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains success message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Structure component data updated successfully.\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Success is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"// Retrieve the value used in the request\r",
											"let component = pm.variables.get(\"component\");\r",
											"\r",
											"// Set the value in the environment or collection\r",
											"pm.environment.set(\"component\", component);\r",
											"\r",
											"// Optionally, log the value to ensure it was set correctly\r",
											"console.log(\"component:\", component);\r",
											"\r",
											"// Define the expected fields\r",
											"const expectedFields = [\"data\", \"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// [\r\n//     {\r\n//         \"structureComponentId\": 100016,//update exciting once\r\n//         \"component\": \"testcomponant1\",\r\n//         \"structureId\": 10000\r\n//     },\r\n//      {\r\n//          // \"structureComponentId\": 100016,//update exciting once\r\n//          \"component\": \"testcomponant1\",\r\n//          \"structureId\": 10000\r\n//      }\r\n// ]\r\n\r\n[\r\n    {\r\n        \"structureComponentId\": {{structureComponentsId}},//update exciting once\r\n        \"component\": \"{{component}}\",\r\n        \"structureId\": {{structureId}}\r\n    }\r\n]\r\n//If nothing is there then structre id is complusory\r\n// [\r\n//     {\r\n//         \"structureId\": 10000// delete all\r\n//     }\r\n// ]\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}structure-component-update",
									"host": [
										"{{base_url}}structure-component-update"
									]
								}
							},
							"response": []
						},
						{
							"name": "structure-component-list-after-update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 'message' is 'Structure components data retrieved successfully'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Structure components data retrieved successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"\r",
											"// Parse the response body\r",
											"let responseBody = pm.response.json();\r",
											"\r",
											"// Extract data from the response\r",
											"let responsecomponent = responseBody.data[0].components;\r",
											"\r",
											"\r",
											"// Retrieve the stored variables\r",
											"let storedcomponent = pm.variables.get(\"component\"); // Get from local variable scope\r",
											"\r",
											"\r",
											"// Verify component\r",
											"pm.test(\"component is correct\", function () {\r",
											"    pm.expect(responsecomponent).to.eql(storedcomponent);\r",
											"});\r",
											"\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that the 'data' field is an array and contains the expected fields within the first object\r",
											"pm.test(\"Verify that 'data' contains the expected fields\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"    \r",
											"    const user = actualResponse.data[0];\r",
											"    const userExpectedFields = [\"components\", \"structureComponentId\"];\r",
											"    \r",
											"    userExpectedFields.forEach(field => {\r",
											"        pm.expect(user).to.have.property(field);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"structureId\": {{structureId}}\r\n}\r\n\r\n// {\r\n    \r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}structure-component-data",
									"host": [
										"{{base_url}}structure-component-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "structure-problem-add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random string of given length\r",
											"function generateRandomString(length) {\r",
											"    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"\r",
											"// Generate random values\r",
											"let randomproblem = generateRandomString(6);\r",
											"let randomdamageType = generateRandomString(6);\r",
											"let randomlevels = generateRandomString(6);\r",
											"\r",
											"// Set variables with generated values\r",
											"pm.variables.set(\"problem\", randomproblem);\r",
											"pm.variables.set(\"damageType\", randomdamageType);\r",
											"pm.variables.set(\"levels\", randomlevels);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"structureProblemId\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"structureProblemId\", jsonData.data.structureProblemId);\r",
											"});\r",
											"\r",
											"// Test script\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains success message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Structure problems added successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Success is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"// Retrieve the values used in the request\r",
											"let problem = pm.variables.get(\"problem\");\r",
											"let damageType = pm.variables.get(\"damageType\");\r",
											"let levels = pm.variables.get(\"levels\");\r",
											"\r",
											"\r",
											"// Set the values in the environment or collection\r",
											"pm.environment.set(\"problemAdd\", problem);\r",
											"pm.environment.set(\"damageTypeAdd\", damageType);\r",
											"pm.environment.set(\"levelsAdd\", levels);\r",
											"\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that the 'data' field is an array and contains the expected fields within the first object\r",
											"pm.test(\"Verify that 'data' contains the expected fields\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"    \r",
											"    const user = actualResponse.data[0];\r",
											"    const userExpectedFields = [\"structureProblemId\"];\r",
											"    \r",
											"    userExpectedFields.forEach(field => {\r",
											"        pm.expect(user).to.have.property(field);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n    \"structureId\":{{structureId}},\r\n    \"problem\": \"{{problem}}\",\r\n    \"damageType\": \"{{damageType}}\",\r\n    \"levels\": \"{{levels}}\"\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}structure-problem-add",
									"host": [
										"{{base_url}}structure-problem-add"
									]
								}
							},
							"response": []
						},
						{
							"name": "structure-problem-list-after-add",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 'message' is 'Structure problem data retrieved successfully'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Structure problem data retrieved successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"let responseBody = pm.response.json();\r",
											"\r",
											"// Extract data from the response\r",
											"let responseproblem = responseBody.data[0].problem;\r",
											"let responsedamageType = responseBody.data[0].damageType;\r",
											"let responselevels = responseBody.data[0].levels;\r",
											"\r",
											"// Retrieve the stored variables\r",
											"let storedproblem = pm.variables.get(\"problemAdd\"); // Get from local variable scope\r",
											"let storeddamageType = pm.variables.get(\"damageTypeAdd\"); // Get from local variable scope\r",
											"let storedlevels = pm.variables.get(\"levelsAdd\"); // Get from local variable scope\r",
											"\r",
											"// Verify surveyorRank\r",
											"pm.test(\"problem is correct\", function () {\r",
											"    pm.expect(responseproblem).to.eql(storedproblem);\r",
											"});\r",
											"\r",
											"// Verify surveyorRank\r",
											"pm.test(\"damageType is correct\", function () {\r",
											"    pm.expect(responsedamageType).to.eql(storeddamageType);\r",
											"});\r",
											"\r",
											"// Verify surveyorRank\r",
											"pm.test(\"levels is correct\", function () {\r",
											"    pm.expect(responselevels).to.eql(storedlevels);\r",
											"});\r",
											"\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that the 'data' field is an array and contains the expected fields within the first object\r",
											"pm.test(\"Verify that 'data' contains the expected fields\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"    \r",
											"    const user = actualResponse.data[0];\r",
											"    const userExpectedFields = [\"damageType\", \"levels\", \"problem\", \"structureProblemsId\"];\r",
											"    \r",
											"    userExpectedFields.forEach(field => {\r",
											"        pm.expect(user).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n     \"structureId\":{{structureId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}structure-problem-data",
									"host": [
										"{{base_url}}structure-problem-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "structure-problem-list-after-add-full",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 'message' is 'Structure problem data retrieved successfully'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Structure problem data retrieved successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that the 'data' field is an array and contains the expected fields within the first object\r",
											"pm.test(\"Verify that 'data' contains the expected fields\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"    \r",
											"    const user = actualResponse.data[0];\r",
											"    const userExpectedFields = [\"createdBy\", \"damageType\", \"levels\", \"problem\", \"updatedBy\"];\r",
											"    \r",
											"    userExpectedFields.forEach(field => {\r",
											"        pm.expect(user).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// {\r\n//      \"structureId\":{{structureId}}\r\n// }\r\n{\r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}structure-problem-data",
									"host": [
										"{{base_url}}structure-problem-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "structure-problem-update",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random string of given length\r",
											"function generateRandomString(length) {\r",
											"    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"\r",
											"// Generate random values\r",
											"let randomproblem = generateRandomString(6);\r",
											"let randomdamageType = generateRandomString(6);\r",
											"let randomlevels = generateRandomString(6);\r",
											"\r",
											"// Set variables with generated values\r",
											"pm.variables.set(\"problem\", randomproblem);\r",
											"pm.variables.set(\"damageType\", randomdamageType);\r",
											"pm.variables.set(\"levels\", randomlevels);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test script\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains success data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Structure problems updated successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Success is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"// Retrieve the values used in the request\r",
											"let problem = pm.variables.get(\"problem\");\r",
											"let damageType = pm.variables.get(\"damageType\");\r",
											"let levels = pm.variables.get(\"levels\");\r",
											"\r",
											"// Set the values in the environment or collection\r",
											"pm.environment.set(\"problem\", problem);\r",
											"pm.environment.set(\"damageType\", damageType);\r",
											"pm.environment.set(\"levels\", levels);\r",
											"\r",
											"// Optionally, store each value in a new variable if needed\r",
											"pm.environment.set(\"problemUpdate\", problem);\r",
											"pm.environment.set(\"damageTypeUpdate\", damageType);\r",
											"pm.environment.set(\"levelsUpdate\", levels);\r",
											"\r",
											"// Optionally, log the values to ensure they were set correctly\r",
											"console.log(\"problem:\", problem);\r",
											"console.log(\"damageType:\", damageType);\r",
											"console.log(\"levels:\", levels);\r",
											"console.log(\"problemUpdate:\", problem);\r",
											"console.log(\"damageTypeUpdate:\", damageType);\r",
											"console.log(\"levelsUpdate:\", levels);\r",
											"\r",
											"\r",
											"// Define the expected fields\r",
											"const expectedFields = [\"data\", \"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"structureId\": {{structureId}},\r\n        \"structureProblemId\": {{structureProblemId}},\r\n        \"problem\": \"{{problem}}\",\r\n        \"damageType\": \"{{damageType}}\",\r\n        \"levels\": \"{{levels}}\"\r\n    }\r\n    // {\r\n    //     \"structureId\": 10000,\r\n    //    // \"structureProblemId\": 100021,\r\n    //     \"problem\": \"p111\",\r\n    //     \"damageType\": \"d111\",\r\n    //     \"levels\": \"l111\"\r\n    // }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}structure-problem-update",
									"host": [
										"{{base_url}}structure-problem-update"
									]
								}
							},
							"response": []
						},
						{
							"name": "structure-problem-list-after-update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 'message' is 'Structure problem data retrieved successfully'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Structure problem data retrieved successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"\r",
											"// Parse the response body\r",
											"let responseBody = pm.response.json();\r",
											"\r",
											"// Extract data from the response\r",
											"let responseProblem = responseBody.data[0].problem; // Adjust this according to your response structure\r",
											"let responseDamageType = responseBody.data[0].damageType; // Adjust this according to your response structure\r",
											"let responseLevels = responseBody.data[0].levels; // Adjust this according to your response structure\r",
											"\r",
											"// Retrieve the stored variables\r",
											"let storedProblem = pm.variables.get(\"problemUpdate\");\r",
											"let storedDamageType = pm.variables.get(\"damageTypeUpdate\");\r",
											"let storedLevels = pm.variables.get(\"levelsUpdate\");\r",
											"\r",
											"// Verify problem\r",
											"pm.test(\"Problem is correct\", function () {\r",
											"    pm.expect(responseProblem).to.eql(storedProblem);\r",
											"});\r",
											"\r",
											"// Verify damageType\r",
											"pm.test(\"Damage Type is correct\", function () {\r",
											"    pm.expect(responseDamageType).to.eql(storedDamageType);\r",
											"});\r",
											"\r",
											"// Verify levels\r",
											"pm.test(\"Levels are correct\", function () {\r",
											"    pm.expect(responseLevels).to.eql(storedLevels);\r",
											"});\r",
											"\r",
											"// Optionally, log the values to ensure they were retrieved correctly\r",
											"console.log(\"responseProblem:\", responseProblem);\r",
											"console.log(\"responseDamageType:\", responseDamageType);\r",
											"console.log(\"responseLevels:\", responseLevels);\r",
											"console.log(\"storedProblem:\", storedProblem);\r",
											"console.log(\"storedDamageType:\", storedDamageType);\r",
											"console.log(\"storedLevels:\", storedLevels);\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that the 'data' field is an array and contains the expected fields within the first object\r",
											"pm.test(\"Verify that 'data' contains the expected fields\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"    \r",
											"    const user = actualResponse.data[0];\r",
											"    const userExpectedFields = [\"damageType\", \"levels\", \"problem\", \"structureProblemsId\"];\r",
											"    \r",
											"    userExpectedFields.forEach(field => {\r",
											"        pm.expect(user).to.have.property(field);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n     \"structureId\":{{structureId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}structure-problem-data",
									"host": [
										"{{base_url}}structure-problem-data"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "questions",
					"item": [
						{
							"name": "questions-add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random string of given length\r",
											"function generateRandomString(length) {\r",
											"    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Function to generate a random numerical value within a range\r",
											"function generateRandomNumber(min, max) {\r",
											"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
											"}\r",
											"\r",
											"// Generate random values\r",
											"let randomQuestion = \"What are the key phases in a construction project \" + generateRandomString(4) + \"?\";\r",
											"let randomSerialNumber = generateRandomNumber(10000, 99999);\r",
											"let randomAnswerPattern = \"textbox\"; // Can be customized further if needed\r",
											"\r",
											"// Generate random answers\r",
											"let randomAnswer = {\r",
											"    \"answer\": generateRandomString(20) + \": This involves defining the project scope, goals, and objectives. Architectural and engineering designs are created, and necessary permits are obtained.\",\r",
											"    \"thumb\": \"thumbs_up\"  // This could be randomized if different types of thumbs are allowed\r",
											"};\r",
											"\r",
											"// Generate random help\r",
											"let randomHelp = {\r",
											"    \"help\": \"Help \" + generateRandomString(4),\r",
											"    \"helpImage\": \"ecd4f551-5c21-4fcd-82eb-e0a5e56ccbe9file_example_JPG_100kB.jpg\"\r",
											"};\r",
											"\r",
											"// Set variables with generated values\r",
											"pm.variables.set(\"question\", randomQuestion);\r",
											"pm.variables.set(\"serialNumber\", randomSerialNumber);\r",
											"pm.variables.set(\"answerPattern\", randomAnswerPattern);\r",
											"\r",
											"// Set variables for answers and help (converting objects to JSON strings for easy use in request)\r",
											"pm.variables.set(\"answers\", JSON.stringify([randomAnswer]));\r",
											"pm.variables.set(\"helps\", JSON.stringify([randomHelp]));\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"questionId\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"questionId\", jsonData.data.questionId);\r",
											"});\r",
											"\r",
											"// Parse the response JSON\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"// Verify message\r",
											"pm.test(\"Message is correct\", function () {\r",
											"    pm.expect(jsonData.message).to.eql(\"Question added successfully\");\r",
											"});\r",
											"\r",
											"// Verify success\r",
											"pm.test(\"Success is true\", function () {\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"// Verify statusCode\r",
											"pm.test(\"StatusCode is 200\", function () {\r",
											"    pm.expect(jsonData.statusCode).to.eql(200);\r",
											"});\r",
											"\r",
											"// Verify data contains questionId\r",
											"pm.test(\"Data contains questionId\", function () {\r",
											"    pm.expect(jsonData.data).to.have.property(\"questionId\");\r",
											"});\r",
											"\r",
											"\r",
											"// Retrieve the values used in the request\r",
											"let question = pm.variables.get(\"question\");\r",
											"let serialNumber = pm.variables.get(\"serialNumber\");\r",
											"let answerPattern = pm.variables.get(\"answerPattern\");\r",
											"\r",
											"\r",
											"// Set the values in the environment or collection\r",
											"pm.environment.set(\"questionAdd\", question);\r",
											"pm.environment.set(\"serialNumberAdd\", serialNumber);\r",
											"pm.environment.set(\"answerPatternAdd\", answerPattern);\r",
											"\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Verify 'data' contains 'questionId'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.have.property(\"questionId\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"question\": \"{{question}}\",\r\n    \"serialNumber\": {{serialNumber}},\r\n    \"answerPattern\": \"{{answerPattern}}\",\r\n    \"questionSegment\": \"1558700990\",\r\n    \"surveyObjectiveId\": [{{surveyObjectiveId}}],\r\n    \"assessmentGuidelineId\": [{{assessmentGudlineId}}],\r\n    \"structureTypeId\": [{{structureId}}],\r\n    \"surveyorRankId\": [{{surveyorRankId}}],\r\n    \"isRequired\":1, // or 1\r\n    \"answers\": {{answers}},\r\n    \"helps\": {{helps}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}question-add",
									"host": [
										"{{base_url}}question-add"
									]
								}
							},
							"response": []
						},
						{
							"name": "questions-add-already-exists",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test script\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains errors\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0]).to.eql(\"This question already exists.\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Success is false\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.false;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"\r",
											"// Define the expected fields\r",
											"const expectedFields = [\"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"question\": \"{{questionAdd}}\",\r\n    \"serialNumber\": {{serialNumberAdd}},\r\n    \"answerPattern\": \"{{answerPatternAdd}}\",\r\n    \"questionSegment\": \"1558700990\",\r\n    \"surveyObjectiveId\": [{{surveyObjectiveId}}],\r\n    \"assessmentGuidelineId\": [{{assessmentGudlineId}}],\r\n    \"structureTypeId\": [{{structureId}}],\r\n    \"surveyorRankId\": [{{surveyorRankId}}],\r\n    \"isRequired\":0, // or 1\r\n    \"answers\": {{answers}},\r\n    \"helps\": {{helps}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}question-add",
									"host": [
										"{{base_url}}question-add"
									]
								}
							},
							"response": []
						},
						{
							"name": "questions-list-after-add",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the response JSON\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify 'questionId' matches variable 'questionId'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedquestionId = pm.variables.get(\"questionId\"); // Retrieve the value of the variable\r",
											"    pm.expect(jsonData.data[0].questionId).to.eql(parseInt(expectedquestionId)); // Ensure the comparison is accurate\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify 'message' is 'Questions data retrieved successfully'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Questions data retrieved successfully\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"// Extract and store answerId and helpId\r",
											"if (jsonData.data.length > 0) {\r",
											"    var answerId = jsonData.data[0].answers[0].answerId;\r",
											"    var helpId = jsonData.data[0].helps[0].helpId;\r",
											"\r",
											"    // Set environment variables\r",
											"    pm.environment.set(\"answerId\", answerId);\r",
											"    pm.environment.set(\"helpId\", helpId);\r",
											"\r",
											"    // Verify that the IDs were stored correctly\r",
											"    pm.test(\"answerId and helpId are stored in environment\", function () {\r",
											"        pm.expect(pm.environment.get(\"answerId\")).to.eql(answerId);\r",
											"        pm.expect(pm.environment.get(\"helpId\")).to.eql(helpId);\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"No data available\", function () {\r",
											"        pm.expect(jsonData.data).to.be.an('array').that.is.empty;\r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"// Parse the response body\r",
											"let responseBody = pm.response.json();\r",
											"\r",
											"// Extract data from the response\r",
											"let responsequestion = responseBody.data[0].question;\r",
											"let responseserialNumber = responseBody.data[0].serialNumber;\r",
											"let responseanswerPattern = responseBody.data[0].answerPattern;\r",
											"\r",
											"\r",
											"// Retrieve the stored variables\r",
											"let storedquestion = pm.variables.get(\"questionAdd\"); // Get from local variable scope\r",
											"let storedserialNumber = pm.variables.get(\"serialNumberAdd\"); // Get from local variable scope\r",
											"let storedanswerPattern = pm.variables.get(\"answerPatternAdd\"); // Get from local variable scope\r",
											"\r",
											"\r",
											"pm.test(\"all are correct\", function () {\r",
											"    pm.expect(responsequestion).to.eql(storedquestion);\r",
											"    pm.expect(responseserialNumber).to.eql(storedserialNumber);\r",
											"    pm.expect(responseanswerPattern).to.eql(storedanswerPattern);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that 'data' is an array and contains at least one item\r",
											"pm.test(\"Verify 'data' is an array and contains at least one item\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"});\r",
											"\r",
											"// Access the first item in the 'data' array\r",
											"const firstDataItem = actualResponse.data[0];\r",
											"\r",
											"// Verify 'answerPattern' and 'question' fields\r",
											"pm.test(\"Verify 'answerPattern' and 'question' fields\", function () {\r",
											"    pm.expect(firstDataItem).to.have.property(\"answerPattern\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"question\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"questionId\");\r",
											"});\r",
											"\r",
											"// Verify 'answers' array and its first item\r",
											"pm.test(\"Verify 'answers' array and its first item\", function () {\r",
											"    const firstAnswer = firstDataItem.answers[0];\r",
											"    pm.expect(firstAnswer).to.have.property(\"answer\");\r",
											"    pm.expect(firstAnswer).to.have.property(\"answerId\");\r",
											"    pm.expect(firstAnswer).to.have.property(\"isActive\");\r",
											"    pm.expect(firstAnswer).to.have.property(\"value\");\r",
											"});\r",
											"\r",
											"// Verify 'assessmentGuidelines' array and its first item\r",
											"pm.test(\"Verify 'assessmentGuidelines' array and its first item\", function () {\r",
											"    const assessmentGuideline = firstDataItem.assessmentGuidelines[0];\r",
											"    pm.expect(assessmentGuideline).to.have.property(\"assessmentGuideline\");\r",
											"    pm.expect(assessmentGuideline).to.have.property(\"assessmentGuidelineId\");\r",
											"    pm.expect(assessmentGuideline).to.have.property(\"isActive\");\r",
											"});\r",
											"\r",
											"// Verify 'createdBy' and 'isActive' fields\r",
											"pm.test(\"Verify 'createdBy' and 'isActive' fields\", function () {\r",
											"    pm.expect(firstDataItem).to.have.property(\"createdBy\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"isActive\");\r",
											"});\r",
											"\r",
											"// Verify 'helps' array and its first item\r",
											"pm.test(\"Verify 'helps' array and its first item\", function () {\r",
											"    const help = firstDataItem.helps[0];\r",
											"    pm.expect(help).to.have.property(\"help\");\r",
											"    pm.expect(help).to.have.property(\"helpId\");\r",
											"    pm.expect(help).to.have.property(\"helpImage\");\r",
											"    pm.expect(help).to.have.property(\"isActive\");\r",
											"});\r",
											"\r",
											"// Verify 'structureType' array and its first item\r",
											"pm.test(\"Verify 'structureType' array and its first item\", function () {\r",
											"    const structureType = firstDataItem.structureType[0];\r",
											"    pm.expect(structureType).to.have.property(\"structureId\");\r",
											"    pm.expect(structureType).to.have.property(\"structureName\");\r",
											"    pm.expect(structureType).to.have.property(\"isActive\");\r",
											"});\r",
											"\r",
											"// Verify 'surveyObjectives' array and its first item\r",
											"pm.test(\"Verify 'surveyObjectives' array and its first item\", function () {\r",
											"    const surveyObjective = firstDataItem.surveyObjectives[0];\r",
											"    pm.expect(surveyObjective).to.have.property(\"surveyObjective\");\r",
											"    pm.expect(surveyObjective).to.have.property(\"surveyObjectiveId\");\r",
											"    pm.expect(surveyObjective).to.have.property(\"isActive\");\r",
											"});\r",
											"\r",
											"// Verify 'surveyorRanks' array and its first item\r",
											"pm.test(\"Verify 'surveyorRanks' array and its first item\", function () {\r",
											"    const surveyorRank = firstDataItem.surveyorRanks[0];\r",
											"    pm.expect(surveyorRank).to.have.property(\"surveyorRank\");\r",
											"    pm.expect(surveyorRank).to.have.property(\"surveyorRankId\");\r",
											"    pm.expect(surveyorRank).to.have.property(\"isActive\");\r",
											"});\r",
											"\r",
											"// Verify 'updatedBy' field\r",
											"pm.test(\"Verify 'updatedBy' field\", function () {\r",
											"    pm.expect(firstDataItem).to.have.property(\"updatedBy\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"questionId\": {{questionId}}\r\n}\r\n\r\n// {\r\n\r\n// }\r\n\r\n// {\r\n//     \"isActive\":3\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}questions-data",
									"host": [
										"{{base_url}}questions-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "questions-list-after-add-isActive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Get the current isActive value from the environment\r",
											"let isActive = pm.environment.get(\"isActive\");\r",
											"\r",
											"// Define the expected response \r",
											"function validateDataIsPresent(response) {\r",
											"    pm.test(\"Response should have success set to true\", () => {\r",
											"        pm.expect(response.success).to.be.true;\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should have statusCode 200\", () => {\r",
											"        pm.expect(response.statusCode).to.eql(200);\r",
											"    });\r",
											"\r",
											"     // Check if the data array is not empty\r",
											"    if (response.data.length > 0) {\r",
											"        // Verify that the first element in the data array has the correct isActive value\r",
											"        pm.test(\"First data element should have isActive value matching the request\", () => {\r",
											"            pm.expect(response.data[0]).to.have.property('isActive', isActive);\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"// Define the expected response \r",
											"function validateNoDataIsPresent(response) {\r",
											"    pm.test(\"Response should have success set to true\", () => {\r",
											"        pm.expect(response.success).to.be.true;\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should have statusCode 200\", () => {\r",
											"        pm.expect(response.statusCode).to.eql(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response should contain an empty data array\", () => {\r",
											"        pm.expect(response.data).to.be.an('array').that.is.empty;\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"// Parse the response\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Check if the isActive value is 0 or 1\r",
											"if ([0, 1].includes(isActive)) {\r",
											"    pm.test(`isActive is '${isActive}', validate response accordingly`, () => {\r",
											"        if (response.data && response.data.length > 0) {\r",
											"            validateDataIsPresent(response);\r",
											"        } else {\r",
											"            validateNoDataIsPresent(response);\r",
											"        }\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Unexpected isActive value\", () => {\r",
											"        pm.expect.fail(`Received unexpected isActive value: ${isActive}`);\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Get the current isActive value from the environment, or initialize it to 0\r",
											"let isActive = pm.environment.get(\"isActive\") || 0;\r",
											"\r",
											"// Toggle isActive between 0 and 1\r",
											"isActive = (isActive === 1) ? 0 : 1;\r",
											"\r",
											"// Set the updated isActive back to the environment\r",
											"pm.environment.set(\"isActive\", isActive);\r",
											"\r",
											"// Set the isActive in the request body\r",
											"let requestData = {\r",
											"    \"isActive\": isActive\r",
											"};\r",
											"\r",
											"// Update the request body with the new isActive value\r",
											"pm.request.body.raw = JSON.stringify(requestData);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// {\r\n//         \"questionId\": {{questionId}}\r\n// }\r\n\r\n// {\r\n\r\n// }\r\n\r\n{\r\n    \"isActive\":{{isActive}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}questions-data",
									"host": [
										"{{base_url}}questions-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "questions-list-after-add-full",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the response JSON\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify 'message' is 'Questions data retrieved successfully'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Questions data retrieved successfully\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"// Extract and store answerId and helpId\r",
											"if (jsonData.data.length > 0) {\r",
											"    var answerId = jsonData.data[0].answers[0].answerId;\r",
											"    var helpId = jsonData.data[0].helps[0].helpId;\r",
											"\r",
											"    // Set environment variables\r",
											"    pm.environment.set(\"answerId\", answerId);\r",
											"    pm.environment.set(\"helpId\", helpId);\r",
											"\r",
											"    // Verify that the IDs were stored correctly\r",
											"    pm.test(\"answerId and helpId are stored in environment\", function () {\r",
											"        pm.expect(pm.environment.get(\"answerId\")).to.eql(answerId);\r",
											"        pm.expect(pm.environment.get(\"helpId\")).to.eql(helpId);\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"No data available\", function () {\r",
											"        pm.expect(jsonData.data).to.be.an('array').that.is.empty;\r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that 'data' is an array and contains at least one item\r",
											"pm.test(\"Verify 'data' is an array and contains at least one item\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"});\r",
											"\r",
											"// Access the first item in the 'data' array\r",
											"const firstDataItem = actualResponse.data[0];\r",
											"\r",
											"// Verify 'answerPattern' and 'question' fields\r",
											"pm.test(\"Verify 'answerPattern' and 'question' fields\", function () {\r",
											"    pm.expect(firstDataItem).to.have.property(\"answerPattern\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"question\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"questionId\");\r",
											"});\r",
											"\r",
											"// Verify 'answers' array and its first item\r",
											"pm.test(\"Verify 'answers' array and its first item\", function () {\r",
											"    const firstAnswer = firstDataItem.answers[0];\r",
											"    pm.expect(firstAnswer).to.have.property(\"answer\");\r",
											"    pm.expect(firstAnswer).to.have.property(\"answerId\");\r",
											"    pm.expect(firstAnswer).to.have.property(\"isActive\");\r",
											"    pm.expect(firstAnswer).to.have.property(\"value\");\r",
											"});\r",
											"\r",
											"// Verify 'assessmentGuidelines' array and its first item\r",
											"pm.test(\"Verify 'assessmentGuidelines' array and its first item\", function () {\r",
											"    const assessmentGuideline = firstDataItem.assessmentGuidelines[0];\r",
											"    pm.expect(assessmentGuideline).to.have.property(\"assessmentGuideline\");\r",
											"    pm.expect(assessmentGuideline).to.have.property(\"assessmentGuidelineId\");\r",
											"    pm.expect(assessmentGuideline).to.have.property(\"isActive\");\r",
											"});\r",
											"\r",
											"// Verify 'createdBy' and 'isActive' fields\r",
											"pm.test(\"Verify 'createdBy' and 'isActive' fields\", function () {\r",
											"    pm.expect(firstDataItem).to.have.property(\"createdBy\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"isActive\");\r",
											"});\r",
											"\r",
											"// Verify 'helps' array and its first item\r",
											"pm.test(\"Verify 'helps' array and its first item\", function () {\r",
											"    const help = firstDataItem.helps[0];\r",
											"    pm.expect(help).to.have.property(\"help\");\r",
											"    pm.expect(help).to.have.property(\"helpId\");\r",
											"    pm.expect(help).to.have.property(\"helpImage\");\r",
											"    pm.expect(help).to.have.property(\"isActive\");\r",
											"});\r",
											"\r",
											"// Verify 'structureType' array and its first item\r",
											"pm.test(\"Verify 'structureType' array and its first item\", function () {\r",
											"    const structureType = firstDataItem.structureType[0];\r",
											"    pm.expect(structureType).to.have.property(\"structureId\");\r",
											"    pm.expect(structureType).to.have.property(\"structureName\");\r",
											"    pm.expect(structureType).to.have.property(\"isActive\");\r",
											"});\r",
											"\r",
											"// Verify 'surveyObjectives' array and its first item\r",
											"pm.test(\"Verify 'surveyObjectives' array and its first item\", function () {\r",
											"    const surveyObjective = firstDataItem.surveyObjectives[0];\r",
											"    pm.expect(surveyObjective).to.have.property(\"surveyObjective\");\r",
											"    pm.expect(surveyObjective).to.have.property(\"surveyObjectiveId\");\r",
											"    pm.expect(surveyObjective).to.have.property(\"isActive\");\r",
											"});\r",
											"\r",
											"// Verify 'surveyorRanks' array and its first item\r",
											"pm.test(\"Verify 'surveyorRanks' array and its first item\", function () {\r",
											"    const surveyorRank = firstDataItem.surveyorRanks[0];\r",
											"    pm.expect(surveyorRank).to.have.property(\"surveyorRank\");\r",
											"    pm.expect(surveyorRank).to.have.property(\"surveyorRankId\");\r",
											"    pm.expect(surveyorRank).to.have.property(\"isActive\");\r",
											"});\r",
											"\r",
											"// Verify 'updatedBy' field\r",
											"pm.test(\"Verify 'updatedBy' field\", function () {\r",
											"    pm.expect(firstDataItem).to.have.property(\"updatedBy\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// {\r\n//         \"questionId\": {{questionId}}\r\n// }\r\n\r\n{\r\n\r\n}\r\n\r\n// {\r\n//     \"isActive\":1\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}questions-data",
									"host": [
										"{{base_url}}questions-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "questions-update",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random string of given length\r",
											"function generateRandomString(length) {\r",
											"    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Function to generate a random numerical value within a range\r",
											"function generateRandomNumber(min, max) {\r",
											"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
											"}\r",
											"\r",
											"// Generate random values\r",
											"let randomQuestion = \"What are the key phases in a construction project \" + generateRandomString(4) + \"?\";\r",
											"let randomSerialNumber = generateRandomNumber(10000, 99999);\r",
											"let randomAnswerPattern = \"textbox\"; // Can be customized further if needed\r",
											"\r",
											"\r",
											"// Set variables with generated values\r",
											"pm.variables.set(\"question\", randomQuestion);\r",
											"pm.variables.set(\"serialNumber\", randomSerialNumber);\r",
											"pm.variables.set(\"answerPattern\", randomAnswerPattern);\r",
											"\r",
											"// Generate random values for answers\r",
											"let randomAnswer = {\r",
											"    \"answer\": \"Pre-Construction: Includes site evaluation, soil testing, and selection of contractors and subcontractors. \" + generateRandomString(10),\r",
											"    \"answerId\": generateRandomNumber(1000, 9999),\r",
											"    \"value\": generateRandomNumber(1, 10) // Random value between 1 and 10\r",
											"};\r",
											"\r",
											"// Generate random values for help\r",
											"let randomHelp = {\r",
											"    \"help\": \"Help \" + generateRandomString(2),\r",
											"    \"helpId\": generateRandomNumber(100000, 999999),\r",
											"    \"helpImage\": \"ecd4f551-5c21-4fcd-82eb-e0a5e56ccbe9file_example_JPG_100kB.jpg\"\r",
											"};\r",
											"\r",
											"// Set environment variables with the generated values\r",
											"pm.environment.set(\"answers\", JSON.stringify([randomAnswer]));\r",
											"pm.environment.set(\"helps\", JSON.stringify([randomHelp]));\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the response JSON\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"// Verify message\r",
											"pm.test(\"Message is correct\", function () {\r",
											"    pm.expect(jsonData.message).to.eql(\"Question updated successfully\");\r",
											"});\r",
											"\r",
											"// Verify success\r",
											"pm.test(\"Success is true\", function () {\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"// Verify statusCode\r",
											"pm.test(\"StatusCode is 200\", function () {\r",
											"    pm.expect(jsonData.statusCode).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"// Retrieve the values used in the request\r",
											"let answerPattern = pm.variables.get(\"answerPattern\");\r",
											"let question = pm.variables.get(\"question\");\r",
											"let serialNumber = pm.variables.get(\"serialNumber\");\r",
											"let answers = pm.variables.get(\"answers\");\r",
											"let helps = pm.variables.get(\"helps\");\r",
											"\r",
											"\r",
											"// Set the values in the environment or collection\r",
											"pm.environment.set(\"answerPatternAfterUpdate\", answerPattern);\r",
											"pm.environment.set(\"questionAfterUpdate\", question);\r",
											"pm.environment.set(\"serialNumberAfterUpdate\", serialNumber);\r",
											"pm.environment.set(\"answersAfterUpdate\", answers);\r",
											"pm.environment.set(\"helpsAfterUpdate\", helps);\r",
											"\r",
											"\r",
											"// Define the expected fields\r",
											"const expectedFields = [\"data\", \"errors\", \"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// {\r\n//             \"questionId\": 1671708947,\r\n//             \"question\": \"How you doing?\",\r\n//             \"serialNumber\": 123456,\r\n//             \"answerPattern\": \"Pattern\",     \r\n//             \"questionSegment\": 1558701475,\r\n//             \"surveyObjectives\": [10000, 10001, 10002, 10003],\r\n//             \"assessmentGuidelines\": [10000, 10001, 10002, 10003],\r\n//             \"structureType\": [10000, 10001, 10002, 10003],\r\n//             \"surveyorRanks\": [100001, 100003, 100004],\r\n//             \"isRequired\":0, // or 1,\r\n//        \"answers\": [\r\n//         {\"answer\": \"A building envelope is the physical separator between the interior and exterior of a building, including walls, floors, roofs, doors, and windows.111\", \"thumb\": \"thumbs_up\"}\r\n//     ],\r\n//     \"helps\": [\r\n//         {\"help\": \"Help 2\", \"help_image\": \"ecd4f551-5c21-4fcd-82eb-e0a5e56ccbe9file_example_JPG_100kB.jpg\"}\r\n//     ]\r\n// }\r\n\r\n\r\n\r\n        {\r\n            \"answerPattern\": \"{{answerPattern}}\",\r\n            \"answers\": {{answers}},\r\n            \"assessmentGuidelinesId\": [{{assessmentGudlineId}}],\r\n            \"helps\": {{helps}},\r\n            \"question\": \"{{question}}\",\r\n            \"questionId\": {{questionId}},\r\n            \"questionSegment\": 1558700990,\r\n            \"serialNumber\": {{serialNumber}},\r\n            \"isRequired\":1, // or 1,\r\n            \"structureTypeId\": [{{structureId}}],\r\n            \"surveyObjectivesId\": [{{surveyObjectiveId}}],\r\n            \"surveyorRanksId\": [{{surveyorRankId}}]\r\n        }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}question-update",
									"host": [
										"{{base_url}}question-update"
									]
								}
							},
							"response": []
						},
						{
							"name": "questions-list-after-update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the response JSON\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify 'questionId' matches variable 'questionId'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedquestionId = pm.variables.get(\"questionId\"); // Retrieve the value of the variable\r",
											"    pm.expect(jsonData.data[0].questionId).to.eql(parseInt(expectedquestionId)); // Ensure the comparison is accurate\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify 'message' is 'Questions data retrieved successfully'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Questions data retrieved successfully\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify 'success' is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Validation Status code is 200\", function()\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"response time\",function()\r",
											"{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"// Extract and store answerId and helpId\r",
											"if (jsonData.data.length > 0) {\r",
											"    var answerId = jsonData.data[0].answers[0].answerId;\r",
											"    var helpId = jsonData.data[0].helps[0].helpId;\r",
											"\r",
											"    // Set environment variables\r",
											"    pm.environment.set(\"answerId\", answerId);\r",
											"    pm.environment.set(\"helpId\", helpId);\r",
											"\r",
											"    // Verify that the IDs were stored correctly\r",
											"    pm.test(\"answerId and helpId are stored in environment\", function () {\r",
											"        pm.expect(pm.environment.get(\"answerId\")).to.eql(answerId);\r",
											"        pm.expect(pm.environment.get(\"helpId\")).to.eql(helpId);\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"No data available\", function () {\r",
											"        pm.expect(jsonData.data).to.be.an('array').that.is.empty;\r",
											"    });\r",
											"}\r",
											"\r",
											"// Parse the response body\r",
											"let responseBody = pm.response.json();\r",
											"\r",
											"// Extract data from the response\r",
											"let responseAnswerPattern = responseBody.data[0].answerPattern;\r",
											"let responseQuestion = responseBody.data[0].question;\r",
											"let responseSerialNumber = responseBody.data[0].serialNumber;\r",
											"\r",
											"// Retrieve the stored variables\r",
											"let storedAnswerPattern = pm.variables.get(\"answerPattern\");\r",
											"let storedQuestion = pm.variables.get(\"question\");\r",
											"let storedSerialNumber = pm.variables.get(\"serialNumber\");\r",
											"\r",
											"// Verify answerPattern\r",
											"pm.test(\"Answer Pattern is correct\", function () {\r",
											"    pm.expect(responseAnswerPattern).to.eql(storedAnswerPattern);\r",
											"});\r",
											"\r",
											"// Verify question\r",
											"pm.test(\"Question is correct\", function () {\r",
											"    pm.expect(responseQuestion).to.eql(storedQuestion);\r",
											"});\r",
											"\r",
											"// Verify serialNumber\r",
											"pm.test(\"Serial Number is correct\", function () {\r",
											"    pm.expect(responseSerialNumber).to.eql(parseInt(storedSerialNumber)); // Ensure comparison with integer\r",
											"});\r",
											"\r",
											"// Optionally, log the values to ensure they were retrieved correctly\r",
											"console.log(\"responseAnswerPattern:\", responseAnswerPattern);\r",
											"console.log(\"responseQuestion:\", responseQuestion);\r",
											"console.log(\"responseSerialNumber:\", responseSerialNumber);\r",
											"\r",
											"\r",
											"// Define the expected fields in the main response\r",
											"const expectedFields = [\"message\", \"statusCode\", \"success\"];\r",
											"\r",
											"// Get the actual response\r",
											"const actualResponse = pm.response.json();\r",
											"\r",
											"// Verify that each expected field is present in the response\r",
											"expectedFields.forEach(field => {\r",
											"    pm.test(`Field ${field} is present in the response`, function () {\r",
											"        pm.expect(actualResponse).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Verify that 'data' is an array and contains at least one item\r",
											"pm.test(\"Verify 'data' is an array and contains at least one item\", function () {\r",
											"    pm.expect(actualResponse.data).to.be.an(\"array\").that.is.not.empty;\r",
											"});\r",
											"\r",
											"// Access the first item in the 'data' array\r",
											"const firstDataItem = actualResponse.data[0];\r",
											"\r",
											"// Verify 'answerPattern' and 'question' fields\r",
											"pm.test(\"Verify 'answerPattern' and 'question' fields\", function () {\r",
											"    pm.expect(firstDataItem).to.have.property(\"answerPattern\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"question\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"questionId\");\r",
											"});\r",
											"\r",
											"// Verify 'answers' array and its first item\r",
											"pm.test(\"Verify 'answers' array and its first item\", function () {\r",
											"    const firstAnswer = firstDataItem.answers[0];\r",
											"    pm.expect(firstAnswer).to.have.property(\"answer\");\r",
											"    pm.expect(firstAnswer).to.have.property(\"answerId\");\r",
											"    pm.expect(firstAnswer).to.have.property(\"isActive\");\r",
											"    pm.expect(firstAnswer).to.have.property(\"value\");\r",
											"});\r",
											"\r",
											"// Verify 'assessmentGuidelines' array and its first item\r",
											"pm.test(\"Verify 'assessmentGuidelines' array and its first item\", function () {\r",
											"    const assessmentGuideline = firstDataItem.assessmentGuidelines[0];\r",
											"    pm.expect(assessmentGuideline).to.have.property(\"assessmentGuideline\");\r",
											"    pm.expect(assessmentGuideline).to.have.property(\"assessmentGuidelineId\");\r",
											"    pm.expect(assessmentGuideline).to.have.property(\"isActive\");\r",
											"});\r",
											"\r",
											"// Verify 'createdBy' and 'isActive' fields\r",
											"pm.test(\"Verify 'createdBy' and 'isActive' fields\", function () {\r",
											"    pm.expect(firstDataItem).to.have.property(\"createdBy\");\r",
											"    pm.expect(firstDataItem).to.have.property(\"isActive\");\r",
											"});\r",
											"\r",
											"// Verify 'helps' array and its first item\r",
											"pm.test(\"Verify 'helps' array and its first item\", function () {\r",
											"    const help = firstDataItem.helps[0];\r",
											"    pm.expect(help).to.have.property(\"help\");\r",
											"    pm.expect(help).to.have.property(\"helpId\");\r",
											"    pm.expect(help).to.have.property(\"helpImage\");\r",
											"    pm.expect(help).to.have.property(\"isActive\");\r",
											"});\r",
											"\r",
											"// Verify 'structureType' array and its first item\r",
											"pm.test(\"Verify 'structureType' array and its first item\", function () {\r",
											"    const structureType = firstDataItem.structureType[0];\r",
											"    pm.expect(structureType).to.have.property(\"structureId\");\r",
											"    pm.expect(structureType).to.have.property(\"structureName\");\r",
											"    pm.expect(structureType).to.have.property(\"isActive\");\r",
											"});\r",
											"\r",
											"// Verify 'surveyObjectives' array and its first item\r",
											"pm.test(\"Verify 'surveyObjectives' array and its first item\", function () {\r",
											"    const surveyObjective = firstDataItem.surveyObjectives[0];\r",
											"    pm.expect(surveyObjective).to.have.property(\"surveyObjective\");\r",
											"    pm.expect(surveyObjective).to.have.property(\"surveyObjectiveId\");\r",
											"    pm.expect(surveyObjective).to.have.property(\"isActive\");\r",
											"});\r",
											"\r",
											"// Verify 'surveyorRanks' array and its first item\r",
											"pm.test(\"Verify 'surveyorRanks' array and its first item\", function () {\r",
											"    const surveyorRank = firstDataItem.surveyorRanks[0];\r",
											"    pm.expect(surveyorRank).to.have.property(\"surveyorRank\");\r",
											"    pm.expect(surveyorRank).to.have.property(\"surveyorRankId\");\r",
											"    pm.expect(surveyorRank).to.have.property(\"isActive\");\r",
											"});\r",
											"\r",
											"// Verify 'updatedBy' field\r",
											"pm.test(\"Verify 'updatedBy' field\", function () {\r",
											"    pm.expect(firstDataItem).to.have.property(\"updatedBy\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"questionId\": {{questionId}}\r\n}\r\n\r\n// {\r\n\r\n// }\r\n\r\n// {\r\n//     \"isActive\":3\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}questions-data",
									"host": [
										"{{base_url}}questions-data"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}